import { useState, useEffect } from "react";
import axios from "axios";
import { AudioRecorder } from "react-audio-voice-recorder";
import { motion } from "framer-motion";
import { FaMicrophone, FaBrain, FaPlay, FaChartBar, FaCheckCircle } from "react-icons/fa";

export default function Dashboard() {
  const [activeTab, setActiveTab] = useState("record"); // record | saved
  const [audioBlob, setAudioBlob] = useState(null);
  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [audioURL, setAudioURL] = useState(null);
  const [audioDuration, setAudioDuration] = useState(null);
  const [recordedAt, setRecordedAt] = useState(null);
  const [savedRecs, setSavedRecs] = useState([]);

  useEffect(() => {
    fetchSavedRecordings();
  }, []);

  const fetchSavedRecordings = async () => {
    try {
      const token = localStorage.getItem("token");
      const res = await axios.get("http://localhost:3001/api/rec/save", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setSavedRecs(res.data);
    } catch (err) {
      console.error("Failed to fetch saved recordings", err);
    }
  };

  const handleRecording = async (blob) => {
    setResult(null);
    setAudioDuration(null);
    setRecordedAt(new Date());

    const wavFile = new File([blob], "presentation.wav", { type: "audio/wav" });
    setAudioBlob(wavFile);
    setAudioURL(URL.createObjectURL(blob));

    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const arrayBuffer = await blob.arrayBuffer();

    audioContext.decodeAudioData(arrayBuffer, (audioBuffer) => {
      setAudioDuration(audioBuffer.duration);
    });
  };

  const uploadAudio = async () => {
    if (!audioBlob) return alert("No audio recorded");

    const formData = new FormData();
    formData.append("audio", audioBlob);

    try {
      setIsLoading(true);
      const token = localStorage.getItem("token");

      const res = await axios.post("http://localhost:3001/api/recording/upload", formData, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "multipart/form-data",
        },
      });

      setResult(res.data);
    } catch (err) {
      console.error("Upload failed", err);
      alert("Something went wrong during upload.");
    } finally {
      setIsLoading(false);
    }
  };

  const saveRecording = async () => {
    if (!result || !audioDuration) return alert("No analysis to save");

    try {
      const token = localStorage.getItem("token");
      await axios.post(
        "http://localhost:3001/api/rec/save",
        {
          fillerCount: result.fillerCount,
          duration: audioDuration,
          date: recordedAt,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      alert("Recording saved successfully!");
      fetchSavedRecordings();
    } catch (err) {
      console.error("Error saving recording", err);
      alert("Failed to save recording.");
    }
  };

  const formatDateTime = (date) =>
    new Date(date).toLocaleString("en-GB", {
      hour12: true,
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    });

  return (
    <div className="absolute top-[4rem] left-64 w-[calc(100%-17rem)] p-4 lg:p-8 flex justify-center items-center">
      <div className="w-full h-full bg-gradient-to-b from-[#003b46] to-[#07575b] text-white shadow-xl rounded-2xl p-6 flex flex-col justify-center items-center">
        <div className="flex flex-col lg:flex-row w-full h-full gap-6 lg:gap-8">

          {/* Left Side - Recording & Analysis */}
          <div className="w-full max-w-md bg-gradient-to-b from-[#00171f] to-[#003b46] rounded-2xl p-6 shadow-lg border border-white/20 flex flex-col gap-4">
            <div className="flex justify-between mb-4">
              <button
                onClick={() => setActiveTab("record")}
                className={`px-4 py-2 font-semibold rounded-lg transition ${
                  activeTab === "record" ? "bg-[#ff6b6b]/80 text-white" : "bg-white/10 text-gray-300 hover:bg-white/20"
                }`}
              >
                üé§ Record & Analyze
              </button>
              <button
                onClick={() => setActiveTab("saved")}
                className={`px-4 py-2 font-semibold rounded-lg transition ${
                  activeTab === "saved" ? "bg-[#ff6b6b]/80 text-white" : "bg-white/10 text-gray-300 hover:bg-white/20"
                }`}
              >
                üìú Saved Recordings
              </button>
            </div>

            {activeTab === "record" && (
              <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.8 }}>
                <h2 className="text-xl lg:text-2xl font-bold mb-3 text-[#ff6b6b]">üé§ Record Your Presentation</h2>

                <AudioRecorder
                  onRecordingComplete={handleRecording}
                  audioTrackConstraints={{ noiseSuppression: true, echoCancellation: true }}
                  downloadOnSavePress={false}
                  downloadFileExtension="wav"
                />

                <button
                  onClick={uploadAudio}
                  disabled={!audioBlob || isLoading}
                  className="mt-4 w-full bg-[#ff6b6b]/80 hover:bg-[#ff6b6b] text-white font-semibold py-2 px-4 rounded-lg transition disabled:opacity-50"
                >
                  {isLoading ? "‚è≥ Analyzing..." : "‚¨Ü Upload & Analyze"}
                </button>

                {result && !isLoading && (
                  <motion.div
                    className="mt-6 bg-white/10 backdrop-blur-lg rounded-xl p-4 border border-white/20 shadow-lg text-gray-100"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8 }}
                  >
                    <h3 className="font-bold text-lg mb-2 text-[#ff6b6b]">‚úÖ Analysis Result</h3>
                    <p>üó£Ô∏è Filler Count: <strong>{result.fillerCount}</strong></p>
                    {audioDuration && <p>‚è±Ô∏è Duration: <strong>{audioDuration.toFixed(2)} s</strong></p>}
                    {recordedAt && <p>üìÖ Date & Time: <strong>{formatDateTime(recordedAt)}</strong></p>}

                    {audioURL && (
                      <div className="mt-4">
                        <h4 className="text-md font-semibold text-gray-200 mb-2">üîä Playback</h4>
                        <audio controls className="w-full rounded-lg">
                          <source src={audioURL} type="audio/wav" />
                          Your browser does not support the audio element.
                        </audio>
                      </div>
                    )}

                    <button
                      onClick={saveRecording}
                      className="mt-4 w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-lg transition"
                    >
                      üíæ Save Analyze
                    </button>
                  </motion.div>
                )}
              </motion.div>
            )}

            {/* Saved Recordings */}
            {activeTab === "saved" && (
              <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.8 }}>
                <h3 className="text-lg font-bold text-[#ff6b6b] mb-4">üìú Saved Recordings</h3>
                {savedRecs.length > 0 ? (
                  <div className="overflow-x-auto rounded-lg border border-white/20 shadow-sm">
                    <table className="min-w-full text-sm text-left text-gray-100">
                      <thead className="bg-white/10 text-gray-300">
                        <tr>
                          <th className="px-4 py-2 border">Date</th>
                          <th className="px-4 py-2 border">Filler Count</th>
                          <th className="px-4 py-2 border">Duration (s)</th>
                        </tr>
                      </thead>
                      <tbody>
                        {savedRecs.map((rec) => (
                          <tr key={rec._id} className="hover:bg-white/10">
                            <td className="border px-4 py-2">{formatDateTime(rec.date)}</td>
                            <td className="border px-4 py-2">{rec.fillerCount}</td>
                            <td className="border px-4 py-2">{rec.duration.toFixed(2)}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <p className="text-gray-400">No saved recordings yet.</p>
                )}
              </motion.div>
            )}
          </div>

          {/* Right Side - Core Features & Benefits */}
          <div className="w-full flex flex-col gap-4">
            <motion.div
              className="bg-gradient-to-br from-[#00171f] to-[#003b46] rounded-2xl p-6 border border-white/20 shadow-lg"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.2 }}
            >
              <h3 className="text-[#ff6b6b] font-bold text-lg mb-3">Core Features</h3>
              <div className="grid grid-cols-2 gap-4">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-br from-[#ff6b6b] to-[#ee5a52] rounded-lg flex items-center justify-center">
                    <FaMicrophone className="text-white text-sm" />
                  </div>
                  <div>
                    <p className="text-white text-xs font-medium">Live Detection</p>
                    <p className="text-gray-400 text-xs">Real-time analysis</p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-br from-orange-500 to-yellow-500 rounded-lg flex items-center justify-center">
                    <FaBrain className="text-white text-sm" />
                  </div>
                  <div>
                    <p className="text-white text-xs font-medium">AI Analysis</p>
                    <p className="text-gray-400 text-xs">Pattern recognition</p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-500 rounded-lg flex items-center justify-center">
                    <FaPlay className="text-white text-sm" />
                  </div>
                  <div>
                    <p className="text-white text-xs font-medium">Practice Drills</p>
                    <p className="text-gray-400 text-xs">Targeted exercises</p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center">
                    <FaChartBar className="text-white text-sm" />
                  </div>
                  <div>
                    <p className="text-white text-xs font-medium">Progress Tracking</p>
                    <p className="text-gray-400 text-xs">Improvement metrics</p>
                  </div>
                </div>
              </div>
            </motion.div>

            <motion.div
              className="bg-gradient-to-br from-[#00171f] to-[#003b46] rounded-2xl p-6 border border-white/20 shadow-lg"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.4 }}
            >
              <h3 className="text-[#ff6b6b] font-bold text-lg mb-3">Key Benefits</h3>
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <FaCheckCircle className="text-green-400 text-xs flex-shrink-0" />
                  <p className="text-white text-xs">Speak with confidence & eliminate nervous patterns</p>
                </div>
                <div className="flex items-center gap-2">
                  <FaCheckCircle className="text-green-400 text-xs flex-shrink-0" />
                  <p className="text-white text-xs">Improve presentation quality & professional skills</p>
                </div>
                <div className="flex items-center gap-2">
                  <FaCheckCircle className="text-green-400 text-xs flex-shrink-0" />
                  <p className="text-white text-xs">Enhanced academic performance & better scores</p>
                </div>
              </div>
            </motion.div>
          </div>

        </div>
      </div>
    </div>
  );
}
