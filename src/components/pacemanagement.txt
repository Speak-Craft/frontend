import React, { useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";
import { FaMicrophone, FaStop, FaPlay, FaPause, FaClock, FaChartBar, FaUserCheck, FaBrain } from "react-icons/fa";
import GaugeChart from "react-gauge-chart";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  ScatterChart,
  Scatter,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar
} from "recharts";
import jsPDF from "jspdf";
import * as htmlToImage from "html-to-image";

import image01 from "../assets/images/pacebg.png";

// Add CSS for spinning animation
const spinKeyframes = `
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
`;

// Inject the CSS
if (typeof document !== 'undefined') {
  const style = document.createElement('style');
  style.textContent = spinKeyframes;
  document.head.appendChild(style);
}

// Industry-Standard Pause Values (Toastmasters/Presentations)
const MICRO_PAUSE = 0.1;      // Breathing, emphasis (0.1-0.3s)
const SHORT_PAUSE = 0.3;      // Natural flow, comma pauses (0.3-1.0s)
const MED_PAUSE = 1.0;        // Sentence breaks, transitions (1.0-2.5s)
const LONG_PAUSE = 2.5;       // Paragraph breaks, audience engagement (2.5-5.0s)
const EXCESSIVE_PAUSE = 5.0;  // Problematic, needs improvement (>5.0s)

// Frontend calculation functions extracted from feature_extraction2.py
const calculatePauseMetrics = (features) => {
  const pauseRatio = features.pause_ratio || 0;
  const shortCount = features.short_count || 0;
  const medCount = features.med_count || 0;
  const longCount = features.long_count || 0;
  const excessiveCount = features.excessive_count || 0;
  const totalPauseTime = features.total_pause_time || 0;
  const pauseP50 = features.pause_p50 || 0;
  const pauseStd = features.pause_std || 0;
  const pauseMax = features.pause_max || 0;
  const pauseMin = features.pause_min || 0;
  const pauseP90 = features.pause_p90 || 0;
  const pauseP95 = features.pause_p95 || 0;
  const maxLongStreak = features.max_long_streak || 0;
  const pauseEfficiency = features.pause_efficiency || 0;
  const pausePatternRegularity = features.pause_pattern_regularity || 0;
  const pauseSpacingConsistency = features.pause_spacing_consistency || 0;

  return {
    pauseRatio: pauseRatio * 100, // Convert to percentage
    shortCount,
    medCount,
    longCount,
    excessiveCount,
    totalPauseTime,
    averagePauseLength: pauseP50,
    pauseStd,
    pauseMax,
    pauseMin,
    pauseP90,
    pauseP95,
    maxLongStreak,
    pauseEfficiency,
    pausePatternRegularity: pausePatternRegularity * 100,
    pauseSpacingConsistency: pauseSpacingConsistency * 100
  };
};

const calculateAdvancedMetrics = (features) => {
  return {
    // Core pause metrics
    short_pauses: features.short_count || 0,
    medium_pauses: features.med_count || 0,
    long_pauses: features.long_count || 0,
    excessive_pauses: features.excessive_count || 0,
    total_pause_time: features.total_pause_time || 0,
    pause_ratio: (features.pause_ratio || 0) * 100,
    average_pause_length: features.pause_p50 || 0,
    pause_std: features.pause_std || 0,
    pause_max: features.pause_max || 0,
    pause_min: features.pause_min || 0,
    pause_p90: features.pause_p90 || 0,
    pause_p95: features.pause_p95 || 0,
    max_long_streak: features.max_long_streak || 0,
    pause_efficiency: features.pause_efficiency || 0,
    pause_pattern_regularity: (features.pause_pattern_regularity || 0) * 100,
    pause_spacing_consistency: (features.pause_spacing_consistency || 0) * 100,
    
    // Novel pause features
    contextual_pause_score: features.contextual_pause_score || 0,
    transition_pause_count: features.transition_pause_count || 0,
    emphasis_pause_count: features.emphasis_pause_count || 0,
    optimal_transition_ratio: (features.optimal_transition_ratio || 0) * 100,
    optimal_emphasis_ratio: (features.optimal_emphasis_ratio || 0) * 100,
    pause_rhythm_consistency: (features.pause_rhythm_consistency || 0) * 100,
    golden_ratio_pauses: (features.golden_ratio_pauses || 0) * 100,
    pause_entropy: (features.pause_entropy || 0) * 100,
    pause_autocorrelation: (features.pause_autocorrelation || 0) * 100,
    cognitive_pause_score: (features.cognitive_pause_score || 0) * 100,
    memory_retrieval_pauses: features.memory_retrieval_pauses || 0,
    confidence_score: (features.confidence_score || 0) * 100,
    optimal_cognitive_pause_ratio: (features.optimal_cognitive_pause_ratio || 0) * 100,
    pause_fractal_dimension: features.pause_fractal_dimension || 0,
    pause_spectral_density: features.pause_spectral_density || 0,
    pause_trend_analysis: (features.pause_trend_analysis || 0) * 100,
    pause_volatility: features.pause_volatility || 0,
    toastmasters_score: (features.toastmasters_compliance_score || 0) * 100,
    
    // Pace management metrics
    wpm_mean: features.wpm_mean || 0,
    wpm_std: features.wpm_std || 0,
    wpm_cv: (features.wpm_cv || 0) * 100,
    wpm_delta_std: features.wpm_delta_std || 0,
    wpm_jerk: features.wpm_jerk || 0,
    wpm_acceleration: features.wpm_acceleration || 0,
    wpm_consistency: (1 - (features.wpm_cv || 0)) * 100,
    wpm_stability: (1 - (features.wpm_delta_std || 0) / 10) * 100,
    
    // Rhythm and flow metrics
    rhythm_outliers: features.rhythm_outliers || 0,
    rhythm_regularity: (features.rhythm_regularity || 0) * 100,
    speech_continuity: (features.speech_continuity || 0) * 100,
    speaking_efficiency: (features.speaking_efficiency || 0) * 100,
    gap_clustering: features.gap_clustering || 0,
    
    // Voice quality metrics
    pitch_mean: features.pitch_mean || 0,
    pitch_std: features.pitch_std || 0,
    jitter_local: features.jitter_local || 0,
    shimmer_local: features.shimmer_local || 0,
    hnr_mean: features.hnr_mean || 0,
    f1_mean: features.f1_mean || 0,
    f2_mean: features.f2_mean || 0,
    f3_mean: features.f3_mean || 0,
    
    // Additional metrics for radar chart
    rhythm_consistency: (features.pause_rhythm_consistency || 0) * 100,
    cognitive_load: (features.cognitive_pause_score || 0) * 100,
    contextual_score: features.contextual_pause_score || 0,
  };
};




const PaceManagement = () => {
  const [isRecording, setIsRecording] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [audioUrl, setAudioUrl] = useState(null);
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);
  const mediaStreamRef = useRef(null);
  const analyserRef = useRef(null);
  const audioContextRef = useRef(null);
  const gainNodeRef = useRef(null);
  const canvasRef = useRef(null);
  let animationFrameId = useRef(null);
  const [activeTab, setActiveTab] = useState("rate");

  const [results, setResults] = useState({
    wordCount: 0,
    duration: 0,
    wpm: 0,
    prediction: "",
    pausePrediction: "",
    modelPrediction: "",
    consistencyScore: 0,
    feedback: "",
    pacingCurve: [],
    pauseTimeline: [],
    pauseDistribution: [],
    advancedMetrics: {},
    pauseAnalysis: {
      prediction: "",
      confidence: 0,
      probabilities: {},
      suggestions: [],
      shortPauses: 0,
      mediumPauses: 0,
      longPauses: 0,
      excessivePauses: 0,
      totalPauseTime: 0,
      pauseRatio: 0,
      averagePauseLength: 0,
      pauseStd: 0,
      pauseMax: 0,
      pauseMin: 0,
      pauseP90: 0,
      pauseP95: 0,
      maxLongStreak: 0,
      pauseEfficiency: 0,
      pausePatternRegularity: 0,
      pauseSpacingConsistency: 0
    },
    voiceQuality: {},
    suggestions: [],
    structuredSuggestions: {},
  });


  const [recordTime, setRecordTime] = useState(0);
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  const [showReportPreview, setShowReportPreview] = useState(false);

  useEffect(() => {
    let timer;

    if (isRecording && !isPaused) {
      timer = setInterval(() => {
        setRecordTime((prev) => prev + 1);
      }, 1000);
    }

    return () => clearInterval(timer);
  }, [isRecording, isPaused]);

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${String(mins).padStart(2, "0")}:${String(secs).padStart(2, "0")}`;
  };

  useEffect(() => {
    return () => {
      if (mediaStreamRef.current) {
        mediaStreamRef.current.getTracks().forEach((track) => track.stop());
      }
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
    };
  }, []);

  useEffect(() => {
    if (isRecording && !isPaused) {
      startAnalyzing();
    }
  }, [isRecording, isPaused]);

  const startAnalyzing = () => {
    if (mediaStreamRef.current) {
      audioContextRef.current = new (window.AudioContext ||
        window.webkitAudioContext)();
      gainNodeRef.current = audioContextRef.current.createGain();
      analyserRef.current = audioContextRef.current.createAnalyser();

      const source = audioContextRef.current.createMediaStreamSource(
        mediaStreamRef.current
      );
      source.connect(analyserRef.current);
      analyserRef.current.connect(gainNodeRef.current);
      gainNodeRef.current.gain.setValueAtTime(
        0,
        audioContextRef.current.currentTime
      );
      gainNodeRef.current.connect(audioContextRef.current.destination);
      analyserRef.current.fftSize = 256;
      drawSineWave();
    }
  };

  const drawSineWave = () => {
    if (!canvasRef.current || !analyserRef.current) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");
    const bufferLength = analyserRef.current.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    const draw = () => {
      if (!isRecording || isPaused) return;
      analyserRef.current.getByteFrequencyData(dataArray);
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.beginPath();

      for (let i = 0; i < bufferLength; i++) {
        const x = (i / bufferLength) * canvas.width;
        const y = (dataArray[i] / 255) * canvas.height;
        ctx.lineTo(x, y);
      }

      ctx.strokeStyle = "rgba(255, 255, 255, 0.5)";
      ctx.lineWidth = 2;
      ctx.stroke();
      animationFrameId.current = requestAnimationFrame(draw);
    };

    cancelAnimationFrame(animationFrameId.current);
    draw();
  };

  const handlePlay = async () => {
    if (!isRecording || isPaused) {
      try {
        if (!isRecording) {
          const stream = await navigator.mediaDevices.getUserMedia({
            audio: true,
          });
          mediaStreamRef.current = stream;
          mediaRecorderRef.current = new MediaRecorder(stream);

          mediaRecorderRef.current.ondataavailable = (event) => {
            audioChunksRef.current.push(event.data);
          };

          mediaRecorderRef.current.onstop = () => {
            const audioBlob = new Blob(audioChunksRef.current, {
              type: "audio/wav",
            });
            const audioUrl = URL.createObjectURL(audioBlob);
            setAudioUrl(audioUrl);

            analyzeAudio(audioBlob, setResults);
          };
        }

        setIsRecording(true);
        setIsPaused(false);

        if (mediaRecorderRef.current.state === "paused") {
          mediaRecorderRef.current.resume();
        } else if (mediaRecorderRef.current.state === "inactive") {
          mediaRecorderRef.current.start();
        }
        drawSineWave();
      } catch (error) {
        console.error("Error accessing the microphone:", error);
      }
    }
  };

  const handlePause = () => {
    if (mediaRecorderRef.current && isRecording && !isPaused) {
      setIsPaused(true);
      mediaRecorderRef.current.pause();
    }
  };

  const handleStop = () => {
    if (mediaRecorderRef.current && isRecording) {
      setIsRecording(false);
      setIsPaused(false);
      setRecordTime(0); // ⏱️ Reset the timer here!
      mediaRecorderRef.current.stop();
      cancelAnimationFrame(animationFrameId.current);
      if (mediaStreamRef.current) {
        mediaStreamRef.current.getTracks().forEach((track) => track.stop());
      }
      audioChunksRef.current = [];
    }
  };

  const analyzeAudio = async (blob, setResults) => {
    const formData = new FormData();
    formData.append("file", blob, "speech.wav");

    try {
      // Call both rate and pause analysis endpoints
      const [rateResponse, pauseResponse] = await Promise.all([
        // Rate analysis - UPDATE THIS URL TO MATCH YOUR RATE MODEL
        fetch("http://localhost:8000/rate-analysis/", {
          method: "POST",
          body: formData,
        }).catch(err => {
          console.warn("Rate analysis not available:", err);
          return { json: () => Promise.resolve({}) };
        }),
        
        // Pause analysis
        fetch("http://localhost:8000/pause-analysis/", {
          method: "POST",
          body: formData,
        })
      ]);

      const [rateData, pauseData] = await Promise.all([
        rateResponse.json(),
        pauseResponse.json()
      ]);

      if (pauseData.error) {
        console.error("Pause analysis error:", pauseData.error);
      } else {
        // Get raw features for frontend calculations
        const rawFeatures = pauseData.rawFeatures || {};
        
        // Calculate frontend-based metrics
        const calculatedPauseMetrics = calculatePauseMetrics(rawFeatures);
        const calculatedAdvancedMetrics = calculateAdvancedMetrics(rawFeatures);
        
        // Send frontend-calculated features to backend for suggestion generation
        let backendSuggestions = {};
        let pauseRecommendations = [];
        let priorityImprovements = [];
        
        try {
          const suggestionsResponse = await fetch("http://localhost:8000/generate-suggestions/", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              features: rawFeatures
            })
          });
          
          if (suggestionsResponse.ok) {
            const suggestionsData = await suggestionsResponse.json();
            backendSuggestions = suggestionsData.structuredSuggestions || {};
            pauseRecommendations = suggestionsData.pauseRecommendations || [];
            priorityImprovements = suggestionsData.priorityImprovements || [];
            console.log("Backend suggestions generated successfully");
          } else {
            console.warn("Failed to get backend suggestions, using empty fallback");
            // Fallback to empty suggestions
            backendSuggestions = {};
            pauseRecommendations = [];
            priorityImprovements = [];
          }
        } catch (error) {
          console.warn("Error getting backend suggestions:", error);
          // Fallback to empty suggestions
          backendSuggestions = {};
          pauseRecommendations = [];
          priorityImprovements = [];
        }

        // Determine display label: ALWAYS use backend model prediction first, then fallback
        // The backend model is the authoritative source for predictions
        const backendLabel = rateData.modelPrediction || rateData.prediction;
        const frontendCalculatedLabel = getWpmLabel(rateData.wpm || 0);
        
        // Use backend prediction if available, otherwise fallback to frontend calculation
        const finalLabel = backendLabel || frontendCalculatedLabel;
        
        console.log(`Display label for ${rateData.wpm} WPM:`);
        console.log(`  Backend model prediction: ${backendLabel || 'Not available'}`);
        console.log(`  Frontend calculated: ${frontendCalculatedLabel}`);
        console.log(`  Final label used: ${finalLabel}`);
        
        // Get feedback from backend using the final determined label (backend prediction preferred)
        let backendRateFeedback = null;
        const requestData = {
          wpm: rateData.wpm || 0,
          label: finalLabel, // Use the final determined label (backend preferred)
          consistencyScore: rateData.consistencyScore || 0,
          pacingCurve: rateData.pacingCurve || [],
          duration: rateData.duration || 0,
          wordCount: rateData.wordCount || 0
        };
        
        console.log("Sending request to backend:", requestData);
        
        try {
          // Try the direct endpoint first
          let feedbackResponse = await fetch("http://localhost:8000/rate/generate-rate-feedback/", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(requestData)
          });
          
          // If that fails, try the redirect endpoint
          if (!feedbackResponse.ok) {
            console.log("Direct endpoint failed, trying redirect endpoint...");
            feedbackResponse = await fetch("http://localhost:8000/generate-rate-feedback/", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(requestData)
            });
          }
          
          if (feedbackResponse.ok) {
            const feedbackData = await feedbackResponse.json();
            backendRateFeedback = feedbackData.enhancedFeedback;
            console.log("Backend feedback generated successfully:", feedbackData);
          } else {
            console.warn("Failed to get backend feedback, using frontend fallback. Status:", feedbackResponse.status);
          }
        } catch (error) {
          console.warn("Error getting backend feedback:", error);
        }
        
        // Use backend feedback if available, otherwise fallback to frontend
        let frontendRateFeedback;
        if (backendRateFeedback) {
          console.log("Using backend feedback");
          frontendRateFeedback = backendRateFeedback;
        } else {
          console.log("Using frontend fallback feedback");
          frontendRateFeedback = generateFrontendFeedback(
            rateData.wpm || 0,
            finalLabel, // Use the final determined label
            rateData.consistencyScore || 0,
            rateData.pacingCurve || [],
            rateData.duration || 0,
            rateData.wordCount || 0
          );
        }
        
        console.log("Final feedback being used:", frontendRateFeedback);

        // Combine rate and pause analysis results with frontend calculations
        setResults({
          // Rate analysis results (from your rate model) - KEEP UNCHANGED
          wordCount: rateData.wordCount || 0,
          duration: rateData.duration || 0,
          wpm: rateData.wpm || 0,
          prediction: finalLabel, // Use final determined label (backend preferred)
          consistencyScore: rateData.consistencyScore || 0,
          pacingCurve: rateData.pacingCurve || [],
          voiceQuality: rateData.voiceQuality || {},
          rateEnhancedFeedback: frontendRateFeedback, // Use frontend-calculated feedback
          modelPrediction: backendLabel || "", // Store backend prediction for reference
          
          // Frontend-calculated pause analysis results
          pausePrediction: pauseData.pauseAnalysis?.prediction || "Analyzing...", // Pause model prediction
          feedback: frontendRateFeedback?.overall_assessment || (rateData && (rateData.feedback || (rateData.enhancedFeedback && rateData.enhancedFeedback.pace_analysis && rateData.enhancedFeedback.pace_analysis.feedback))) || "Analysis in progress...",
          pauseTimeline: pauseData.pauseTimeline || [],
          pauseDistribution: pauseData.pauseDistribution || [],
          advancedMetrics: calculatedAdvancedMetrics,
          pauseAnalysis: {
            prediction: pauseData.pauseAnalysis?.prediction || "Unknown",
            confidence: pauseData.pauseAnalysis?.confidence || 0,
            probabilities: pauseData.pauseAnalysis?.probabilities || {},
            suggestions: pauseData.pauseAnalysis?.suggestions || [],
            shortPauses: calculatedPauseMetrics.shortCount,
            mediumPauses: calculatedPauseMetrics.medCount,
            longPauses: calculatedPauseMetrics.longCount,
            excessivePauses: calculatedPauseMetrics.excessiveCount,
            totalPauseTime: calculatedPauseMetrics.totalPauseTime,
            pauseRatio: calculatedPauseMetrics.pauseRatio,
            averagePauseLength: calculatedPauseMetrics.averagePauseLength,
            pauseStd: calculatedPauseMetrics.pauseStd,
            pauseMax: calculatedPauseMetrics.pauseMax,
            pauseMin: calculatedPauseMetrics.pauseMin,
            pauseP90: calculatedPauseMetrics.pauseP90,
            pauseP95: calculatedPauseMetrics.pauseP95,
            maxLongStreak: calculatedPauseMetrics.maxLongStreak,
            pauseEfficiency: calculatedPauseMetrics.pauseEfficiency,
            pausePatternRegularity: calculatedPauseMetrics.pausePatternRegularity,
            pauseSpacingConsistency: calculatedPauseMetrics.pauseSpacingConsistency
          },
          suggestions: pauseRecommendations, // Backend-generated pause recommendations
          priorityImprovements: priorityImprovements, // Backend-generated comprehensive improvements
          structuredSuggestions: backendSuggestions, // Backend-generated structured suggestions
          enhancedFeedback: null,
          realTimeFeedback: null,
          comprehensiveReport: null,
          // Keep backend data as fallback
          backendSuggestions: pauseData.suggestions || [],
          backendPriorityImprovements: pauseData.priorityImprovements || [],
          improvementAreas: [],
        });
      }
    } catch (err) {
      console.error("Error sending audio:", err);
    }
  };

  // Frontend WPM label calculation (using exact same logic as model training)
  // Backend model was trained with: <100=Slow, 100-150=Ideal, >150=Fast
  const getWpmLabel = (wpm) => {
    if (wpm < 100) return "Slow";
    if (wpm <= 150) return "Ideal";
    return "Fast";
  };

  // Frontend feedback generation based on calculated label
  const generateFrontendFeedback = (wpm, label, consistencyScore, pacingCurve, duration, wordCount) => {
    const feedback = {
      pace_analysis: {
        category: label,
        emoji: getWpmEmoji(label),
        feedback: getWpmFeedback(wpm, label),
        suggestions: getWpmSuggestions(wpm, label)
      },
      consistency_analysis: {
        category: getConsistencyCategory(consistencyScore),
        emoji: getConsistencyEmoji(consistencyScore),
        feedback: getConsistencyFeedback(consistencyScore),
        suggestions: getConsistencySuggestions(consistencyScore),
        score: consistencyScore
      },
      flow_analysis: {
        category: getFlowCategory(duration, wordCount),
        emoji: getFlowEmoji(duration, wordCount),
        feedback: getFlowFeedback(duration, wordCount),
        words_per_second: duration > 0 ? wordCount / duration : null
      }
    };
    
    // Generate overall assessment like the backend does
    const pace_emoji = feedback.pace_analysis.emoji;
    const pace_category = feedback.pace_analysis.category;
    const consistency_emoji = feedback.consistency_analysis.emoji;
    const consistency_category = feedback.consistency_analysis.category;
    const flow_emoji = feedback.flow_analysis.emoji;
    const flow_category = feedback.flow_analysis.category;
    
    feedback.overall_assessment = `${pace_emoji} ${pace_category} Pace • ${consistency_emoji} ${consistency_category} Consistency • ${flow_emoji} ${flow_category} Flow`;
    
    return feedback;
  };

  const getWpmEmoji = (label) => {
    switch (label) {
      case "Slow": return "🟡";
      case "Ideal": return "🟢";
      case "Fast": return "🟠";
      default: return "❓";
    }
  };

  const getWpmFeedback = (wpm, label) => {
    switch (label) {
      case "Slow":
        return "Your pace is below the ideal range but manageable with practice.";
      case "Ideal":
        return "Excellent! You're speaking at an optimal pace for audience engagement.";
      case "Fast":
        return "Your pace is above optimal and may affect audience comprehension.";
      default:
        return "Unable to determine pace category.";
    }
  };

  const getWpmSuggestions = (wpm, label) => {
    switch (label) {
      case "Slow":
        return [
          "Aim to increase your pace by 15-20 WPM",
          "Practice with timing exercises using a stopwatch",
          "Focus on reducing unnecessary pauses between words"
        ];
      case "Ideal":
        return [
          "Maintain this pace consistently throughout your presentation",
          "Use strategic pauses for emphasis rather than slowing down",
          "Practice varying your pace slightly for dynamic delivery"
        ];
      case "Fast":
        return [
          "Practice breathing exercises to control your pace",
          "Use punctuation marks as natural pause indicators",
          "Record yourself and identify sections that need slowing down"
        ];
      default:
        return ["Continue practicing to improve your speech pace."];
    }
  };

  const getConsistencyCategory = (score) => {
    if (score >= 85) return "Excellent";
    if (score >= 70) return "Good";
    if (score >= 50) return "Fair";
    return "Needs Improvement";
  };

  const getConsistencyEmoji = (score) => {
    if (score >= 85) return "🏆";
    if (score >= 70) return "✅";
    if (score >= 50) return "⚠️";
    return "🔄";
  };

  const getConsistencyFeedback = (score) => {
    if (score >= 85) return "Your pacing consistency is outstanding!";
    if (score >= 70) return "Good pacing consistency with room for improvement.";
    if (score >= 50) return "Moderate pacing consistency that can be improved.";
    return "Significant pacing variations detected.";
  };

  const getConsistencySuggestions = (score) => {
    if (score >= 85) return [
      "Maintain this level of consistency",
      "Use your natural rhythm to enhance delivery"
    ];
    if (score >= 70) return [
      "Practice maintaining steady rhythm",
      "Use breathing techniques for consistent pacing"
    ];
    if (score >= 50) return [
      "Practice with a metronome to develop steady rhythm",
      "Identify sections where pace varies significantly"
    ];
    return [
      "Focus on maintaining consistent breathing patterns",
      "Practice reading with consistent timing",
      "Use pacing markers throughout your speech"
    ];
  };

  const getFlowCategory = (duration, wordCount) => {
    if (duration <= 0) return "Unknown";
    const wordsPerSecond = wordCount / duration;
    if (wordsPerSecond < 1.5) return "Paused";
    if (wordsPerSecond < 2.5) return "Natural";
    return "Rapid";
  };

  const getFlowEmoji = (duration, wordCount) => {
    const category = getFlowCategory(duration, wordCount);
    switch (category) {
      case "Paused": return "⏸️";
      case "Natural": return "🌊";
      case "Rapid": return "⚡";
      default: return "❓";
    }
  };

  const getFlowFeedback = (duration, wordCount) => {
    const category = getFlowCategory(duration, wordCount);
    switch (category) {
      case "Paused":
        return "Your speech has many pauses, which can be strategic or distracting.";
      case "Natural":
        return "Good natural flow with appropriate pauses.";
      case "Rapid":
        return "Very rapid speech flow that may need pacing control.";
      default:
        return "Unable to analyze speech flow.";
    }
  };

  // Calculate excessive pauses count from backend data
  const calculateExcessivePauses = () => {
    // Use the actual excessive pause count from the backend analysis
    if (results.pauseAnalysis && typeof results.pauseAnalysis.excessivePauses === 'number') {
      return results.pauseAnalysis.excessivePauses;
    }
    
    // Fallback: calculate from timeline data if backend data not available
    if (!results.pauseTimeline || !Array.isArray(results.pauseTimeline)) {
      return 0;
    }

    const EXCESSIVE_PAUSE_THRESHOLD = 5.0; // 5 seconds (industry standard)
    let excessiveCount = 0;

    results.pauseTimeline.forEach(pause => {
      const duration = pause.duration || 0;
      if (duration > EXCESSIVE_PAUSE_THRESHOLD) {
        excessiveCount++;
      }
    });

    return excessiveCount;
  };



  const downloadPDFReport = () => {
    if (isGeneratingReport) return;
    setIsGeneratingReport(true);
    
    try {
      generateProfessionalReport();
      // Show success message after a short delay
      setTimeout(() => {
        setIsGeneratingReport(false);
        // You could add a toast notification here
        console.log("✅ Professional report generated successfully!");
      }, 1000);
    } catch (error) {
      setIsGeneratingReport(false);
      console.error("❌ Report generation failed:", error);
    }
  };

  const generateProfessionalReport = () => {
        const pdf = new jsPDF("p", "mm", "a4");
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    let yPosition = 20;

    // Helper function to add text with auto-wrap
    const addText = (text, x, y, maxWidth, fontSize = 10, color = [0, 0, 0]) => {
      pdf.setFontSize(fontSize);
      pdf.setTextColor(color[0], color[1], color[2]);
      const lines = pdf.splitTextToSize(text, maxWidth);
      pdf.text(lines, x, y);
      return y + (lines.length * (fontSize * 0.35));
    };

    // Helper function to add section header
    const addSectionHeader = (title, y) => {
      pdf.setFillColor(0, 60, 70); // Dark teal
      pdf.rect(15, y - 5, pageWidth - 30, 8, 'F');
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(12);
      pdf.setFont(undefined, 'bold');
      pdf.text(title, 20, y + 1);
      pdf.setTextColor(0, 0, 0);
      pdf.setFont(undefined, 'normal');
      return y + 15;
    };

    // Helper function to add metric row
    const addMetricRow = (label, value, y) => {
      pdf.setFontSize(9);
      pdf.text(label + ":", 20, y);
      pdf.setFont(undefined, 'bold');
      pdf.text(value, 120, y);
      pdf.setFont(undefined, 'normal');
      return y + 5;
    };

    // Helper function to check if we need a new page
    const checkNewPage = (requiredSpace) => {
      if (yPosition + requiredSpace > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
        return true;
      }
      return false;
    };

    try {
      // Title Page
      pdf.setFillColor(0, 60, 70);
      pdf.rect(0, 0, pageWidth, 50, 'F');
      
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(24);
      pdf.setFont(undefined, 'bold');
      pdf.text("SPEECH ANALYSIS REPORT", pageWidth / 2, 25, { align: 'center' });
      
      pdf.setFontSize(16);
      pdf.setFont(undefined, 'normal');
      pdf.text("Professional Pace & Pause Management Analysis", pageWidth / 2, 35, { align: 'center' });
      
      pdf.setTextColor(0, 0, 0);
      yPosition = 70;

      // Date and Session Info
      const currentDate = new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });

      yPosition = addText(`Report Generated: ${currentDate}`, 20, yPosition, pageWidth - 40, 10);
      yPosition = addText(`Duration: ${formatTime(results.duration)}`, 20, yPosition, pageWidth - 40, 10);
      yPosition = addText(`Word Count: ${results.wordCount}`, 20, yPosition, pageWidth - 40, 10);
      yPosition += 10;

      // Executive Summary
      yPosition = addSectionHeader("EXECUTIVE SUMMARY", yPosition);
      checkNewPage(30);
      
      const summaryText = `This comprehensive speech analysis reveals ${results.prediction?.toLowerCase() || 'optimal'} pacing with ${results.consistencyScore?.toFixed(1) || '0'}% consistency. `;
      yPosition = addText(summaryText, 20, yPosition, pageWidth - 40, 10);
      
      if (results.rateEnhancedFeedback?.overall_assessment) {
        yPosition = addText(`Overall Assessment: ${results.rateEnhancedFeedback.overall_assessment}`, 20, yPosition, pageWidth - 40, 10);
      }
      
      yPosition += 10;

      // Speech Rate Analysis
      yPosition = addSectionHeader("SPEECH RATE ANALYSIS", yPosition);
      checkNewPage(40);
      
      yPosition = addMetricRow("Words Per Minute", `${results.wpm?.toFixed(1) || '0'} WPM`, yPosition);
      yPosition = addMetricRow("Rate Category", results.prediction || "Analyzing", yPosition);
      yPosition = addMetricRow("Consistency Score", `${results.consistencyScore?.toFixed(1) || '0'}%`, yPosition);
      
      // Add WPM rating with visual indicator (using backend model training thresholds)
      yPosition += 5;
      const wpmRating = results.wpm < 100 ? "Slow" : results.wpm <= 150 ? "Ideal" : "Fast";
      const wpmColor = wpmRating === "Ideal" ? [34, 197, 94] : wpmRating === "Slow" ? [251, 191, 36] : [239, 68, 68];
      yPosition = addText(`Performance Rating: ${wpmRating}`, 20, yPosition, pageWidth - 40, 10, wpmColor);
      
      // Rate Feedback
      if (results.rateEnhancedFeedback?.pace_analysis) {
        yPosition += 5;
        yPosition = addText("Pace Analysis:", 20, yPosition, pageWidth - 40, 10, [0, 60, 70]);
        yPosition = addText(results.rateEnhancedFeedback.pace_analysis.feedback, 20, yPosition, pageWidth - 40, 9);
        
        if (results.rateEnhancedFeedback.pace_analysis.suggestions) {
          yPosition += 5;
          yPosition = addText("Recommendations:", 20, yPosition, pageWidth - 40, 10, [0, 60, 70]);
          results.rateEnhancedFeedback.pace_analysis.suggestions.slice(0, 3).forEach(suggestion => {
            yPosition = addText(`• ${suggestion}`, 25, yPosition, pageWidth - 45, 9);
          });
        }
      }
      
      yPosition += 10;

      // Pause Analysis
      yPosition = addSectionHeader("PAUSE ANALYSIS", yPosition);
      checkNewPage(50);
      
      yPosition = addMetricRow("Total Pause Time", `${results.pauseAnalysis?.totalPauseTime?.toFixed(1) || '0'} seconds`, yPosition);
      yPosition = addMetricRow("Pause Ratio", `${results.pauseAnalysis?.pauseRatio?.toFixed(1) || '0'}%`, yPosition);
      yPosition = addMetricRow("Short Pauses", `${results.pauseAnalysis?.shortPauses || '0'}`, yPosition);
      yPosition = addMetricRow("Medium Pauses", `${results.pauseAnalysis?.mediumPauses || '0'}`, yPosition);
      yPosition = addMetricRow("Long Pauses", `${results.pauseAnalysis?.longPauses || '0'}`, yPosition);
      yPosition = addMetricRow("Excessive Pauses", `${results.pauseAnalysis?.excessivePauses || '0'}`, yPosition);
      yPosition = addMetricRow("Average Pause Length", `${results.pauseAnalysis?.averagePauseLength?.toFixed(2) || '0'}s`, yPosition);
      yPosition = addMetricRow("Pause Efficiency", `${results.pauseAnalysis?.pauseEfficiency?.toFixed(2) || '0'}s`, yPosition);
      
      // Pause Recommendations
      if (results.suggestions && results.suggestions.length > 0) {
        yPosition += 5;
        yPosition = addText("Priority Recommendations:", 20, yPosition, pageWidth - 40, 10, [0, 60, 70]);
        
        const highPriority = results.suggestions.filter(s => s.priority === "High");
        const mediumPriority = results.suggestions.filter(s => s.priority === "Medium");
        
        if (highPriority.length > 0) {
          yPosition = addText("High Priority Issues:", 25, yPosition, pageWidth - 45, 9, [220, 38, 38]);
          highPriority.slice(0, 2).forEach(suggestion => {
            yPosition = addText(`• ${suggestion.issue}: ${suggestion.action}`, 30, yPosition, pageWidth - 50, 8);
          });
        }
        
        if (mediumPriority.length > 0) {
          yPosition = addText("Medium Priority Issues:", 25, yPosition, pageWidth - 45, 9, [245, 158, 11]);
          mediumPriority.slice(0, 2).forEach(suggestion => {
            yPosition = addText(`• ${suggestion.issue}: ${suggestion.action}`, 30, yPosition, pageWidth - 50, 8);
          });
        }
      }
      
      yPosition += 10;

      // AI Insights
      yPosition = addSectionHeader("AI-POWERED INSIGHTS", yPosition);
      checkNewPage(40);
      
      if (results.advancedMetrics) {
        yPosition = addMetricRow("Toastmasters Compliance", `${results.advancedMetrics.toastmasters_score?.toFixed(1) || '0'}%`, yPosition);
        yPosition = addMetricRow("Confidence Score", `${results.advancedMetrics.confidence_score?.toFixed(1) || '0'}%`, yPosition);
        yPosition = addMetricRow("Speaking Efficiency", `${results.advancedMetrics.speaking_efficiency?.toFixed(1) || '0'}%`, yPosition);
        yPosition = addMetricRow("Rhythm Consistency", `${results.advancedMetrics.rhythm_consistency?.toFixed(1) || '0'}%`, yPosition);
        yPosition = addMetricRow("Cognitive Load Score", `${results.advancedMetrics.cognitive_load?.toFixed(1) || '0'}%`, yPosition);
      }
      
      // AI Recommendations
      if (results.priorityImprovements && results.priorityImprovements.length > 0) {
        yPosition += 5;
        yPosition = addText("AI-Generated Improvements:", 20, yPosition, pageWidth - 40, 10, [0, 60, 70]);
        
        const improvements = results.priorityImprovements.slice(0, 3);
        improvements.forEach(improvement => {
          yPosition = addText(`• ${improvement.issue}: ${improvement.action}`, 25, yPosition, pageWidth - 45, 9);
        });
      }
      
      yPosition += 10;

      // Comprehensive Feedback & Recommendations
      yPosition = addSectionHeader("COMPREHENSIVE FEEDBACK & RECOMMENDATIONS", yPosition);
      checkNewPage(60);
      
      // Frontend Rate Feedback
      if (results.rateEnhancedFeedback) {
        yPosition = addText("Speech Rate Analysis:", 20, yPosition, pageWidth - 40, 10, [0, 60, 70]);
        yPosition = addText(results.rateEnhancedFeedback.overall_assessment || "Analysis completed", 25, yPosition, pageWidth - 45, 9);
        
        if (results.rateEnhancedFeedback.pace_analysis?.suggestions) {
          yPosition += 3;
          yPosition = addText("Pace Recommendations:", 25, yPosition, pageWidth - 45, 9, [0, 60, 70]);
          results.rateEnhancedFeedback.pace_analysis.suggestions.forEach(suggestion => {
            yPosition = addText(`• ${suggestion}`, 30, yPosition, pageWidth - 50, 8);
          });
        }
        
        if (results.rateEnhancedFeedback.consistency_analysis?.suggestions) {
          yPosition += 3;
          yPosition = addText("Consistency Recommendations:", 25, yPosition, pageWidth - 45, 9, [0, 60, 70]);
          results.rateEnhancedFeedback.consistency_analysis.suggestions.forEach(suggestion => {
            yPosition = addText(`• ${suggestion}`, 30, yPosition, pageWidth - 50, 8);
          });
        }
        
        yPosition += 5;
      }
      
      // Backend Pause Recommendations
      if (results.suggestions && results.suggestions.length > 0) {
        yPosition = addText("Pause Management Recommendations:", 20, yPosition, pageWidth - 40, 10, [0, 60, 70]);
        
        const groupedSuggestions = {
          High: results.suggestions.filter(s => s.priority === "High"),
          Medium: results.suggestions.filter(s => s.priority === "Medium"),
          Low: results.suggestions.filter(s => s.priority === "Low")
        };
        
        Object.entries(groupedSuggestions).forEach(([priority, suggestions]) => {
          if (suggestions.length > 0) {
            const priorityColor = priority === "High" ? [220, 38, 38] : priority === "Medium" ? [245, 158, 11] : [34, 197, 94];
            yPosition = addText(`${priority} Priority:`, 25, yPosition, pageWidth - 45, 9, priorityColor);
            suggestions.forEach(suggestion => {
              yPosition = addText(`• ${suggestion.issue}: ${suggestion.action}`, 30, yPosition, pageWidth - 50, 8);
              yPosition = addText(`  Target: ${suggestion.target} (Impact: ${suggestion.impact})`, 32, yPosition, pageWidth - 52, 7, [100, 100, 100]);
            });
          }
        });
        
        yPosition += 5;
      }
      
      // AI-Generated Priority Improvements
      if (results.priorityImprovements && results.priorityImprovements.length > 0) {
        yPosition = addText("AI-Generated Priority Improvements:", 20, yPosition, pageWidth - 40, 10, [0, 60, 70]);
        
        const groupedImprovements = {
          High: results.priorityImprovements.filter(s => s.priority === "High"),
          Medium: results.priorityImprovements.filter(s => s.priority === "Medium"),
          Low: results.priorityImprovements.filter(s => s.priority === "Low"),
          Practice: results.priorityImprovements.filter(s => s.priority === "Practice"),
          Immediate: results.priorityImprovements.filter(s => s.priority === "Immediate")
        };
        
        Object.entries(groupedImprovements).forEach(([category, improvements]) => {
          if (improvements.length > 0) {
            const categoryColor = category === "High" ? [220, 38, 38] : 
                                category === "Medium" ? [245, 158, 11] : 
                                category === "Low" ? [34, 197, 94] :
                                category === "Practice" ? [59, 130, 246] : [168, 85, 247];
            yPosition = addText(`${category} Category:`, 25, yPosition, pageWidth - 45, 9, categoryColor);
            improvements.slice(0, 3).forEach(improvement => { // Limit to top 3 per category
              yPosition = addText(`• ${improvement.issue}: ${improvement.action}`, 30, yPosition, pageWidth - 50, 8);
              yPosition = addText(`  Current: ${improvement.current} → Target: ${improvement.target}`, 32, yPosition, pageWidth - 52, 7, [100, 100, 100]);
            });
          }
        });
        
        yPosition += 5;
      }
      
      // Structured Suggestions from Backend
      if (results.structuredSuggestions && Object.keys(results.structuredSuggestions).length > 0) {
        yPosition = addText("Structured Analysis Suggestions:", 20, yPosition, pageWidth - 40, 10, [0, 60, 70]);
        
        Object.entries(results.structuredSuggestions).forEach(([category, suggestions]) => {
          if (suggestions && suggestions.length > 0) {
            yPosition = addText(`${category.replace(/_/g, ' ').toUpperCase()}:`, 25, yPosition, pageWidth - 45, 9, [0, 60, 70]);
            suggestions.slice(0, 2).forEach(suggestion => {
              yPosition = addText(`• ${suggestion}`, 30, yPosition, pageWidth - 50, 8);
            });
          }
        });
        
        yPosition += 5;
      }
      
      yPosition += 10;

      // Action Plan
      yPosition = addSectionHeader("RECOMMENDED ACTION PLAN", yPosition);
      checkNewPage(50);
      
      const actionItems = [];
      const priorities = [];
      
      // Add action items based on analysis with priority levels (using backend model training thresholds)
      if (results.wpm < 100) {
        actionItems.push("Practice speaking at a faster pace to reach 100-150 WPM range");
        priorities.push("High");
      } else if (results.wpm > 150) {
        actionItems.push("Practice slowing down speech rate for better audience comprehension");
        priorities.push("High");
      }
      
      if (results.pauseAnalysis?.pauseRatio > 15) {
        actionItems.push("Reduce total pause time to 8-12% of speech duration");
        priorities.push("High");
      } else if (results.pauseAnalysis?.pauseRatio < 8) {
        actionItems.push("Add strategic pauses for emphasis and audience processing");
        priorities.push("Medium");
      }
      
      if (results.consistencyScore < 70) {
        actionItems.push("Practice with metronome to improve pacing consistency");
        priorities.push("Medium");
      }
      
      if (results.pauseAnalysis?.excessivePauses > 0) {
        actionItems.push("Eliminate all pauses longer than 5 seconds");
        priorities.push("High");
      }
      
      if (actionItems.length === 0) {
        actionItems.push("Continue current speaking practices - analysis shows good performance");
        actionItems.push("Practice maintaining consistent pace throughout longer presentations");
        priorities.push("Low", "Low");
      }
      
      // Add action items with priority indicators
      actionItems.forEach((item, index) => {
        const priority = priorities[index] || "Low";
        const priorityColor = priority === "High" ? [220, 38, 38] : priority === "Medium" ? [245, 158, 11] : [34, 197, 94];
        
        yPosition = addText(`Priority: ${priority}`, 20, yPosition, pageWidth - 40, 9, priorityColor);
        yPosition = addText(`${index + 1}. ${item}`, 20, yPosition, pageWidth - 40, 10);
        yPosition += 3;
      });
      
      // Add progress tracking section
      yPosition += 5;
      yPosition = addText("Progress Tracking:", 20, yPosition, pageWidth - 40, 10, [0, 60, 70]);
      yPosition = addText("□ Record another session to track improvement", 25, yPosition, pageWidth - 45, 9);
      yPosition = addText("□ Practice recommended exercises daily", 25, yPosition, pageWidth - 45, 9);
      yPosition = addText("□ Set specific goals based on this analysis", 25, yPosition, pageWidth - 45, 9);
      
      yPosition += 10;

      // Add Summary Page
      pdf.addPage();
      yPosition = 20;
      
      yPosition = addSectionHeader("ANALYSIS SUMMARY", yPosition);
      
      // Key Performance Indicators
      yPosition = addText("Key Performance Indicators:", 20, yPosition, pageWidth - 40, 11, [0, 60, 70]);
      yPosition += 5;
      
      const kpis = [
        { label: "Overall Performance", value: results.prediction || "Analyzing", color: results.prediction === "Ideal" ? [34, 197, 94] : [245, 158, 11] },
        { label: "Speech Rate", value: `${results.wpm?.toFixed(1) || '0'} WPM`, color: [0, 60, 70] },
        { label: "Consistency Score", value: `${results.consistencyScore?.toFixed(1) || '0'}%`, color: [34, 197, 94] },
        { label: "Pause Management", value: `${results.pauseAnalysis?.pauseRatio?.toFixed(1) || '0'}% ratio`, color: [59, 130, 246] },
        { label: "AI Confidence", value: `${results.pauseAnalysis?.confidence?.toFixed(1) || '0'}%`, color: [168, 85, 247] }
      ];
      
      kpis.forEach(kpi => {
        yPosition = addText(`${kpi.label}: ${kpi.value}`, 25, yPosition, pageWidth - 45, 10, kpi.color);
      });
      
      yPosition += 10;
      
      // Next Steps
      yPosition = addSectionHeader("NEXT STEPS", yPosition);
      yPosition = addText("1. Review the recommendations in the Action Plan section", 20, yPosition, pageWidth - 40, 10);
      yPosition = addText("2. Practice the suggested exercises for 15-20 minutes daily", 20, yPosition, pageWidth - 40, 10);
      yPosition = addText("3. Record another session in 1-2 weeks to track progress", 20, yPosition, pageWidth - 40, 10);
      yPosition = addText("4. Focus on the high-priority areas identified in this report", 20, yPosition, pageWidth - 40, 10);
      yPosition = addText("5. Consider joining a Toastmasters club for additional practice", 20, yPosition, pageWidth - 40, 10);
      
      yPosition += 10;
      
      // Contact Information
      yPosition = addSectionHeader("SUPPORT & RESOURCES", yPosition);
      yPosition = addText("For additional support and resources:", 20, yPosition, pageWidth - 40, 10);
      yPosition = addText("• SpeakCraft Platform: Access more training modules", 25, yPosition, pageWidth - 45, 9);
      yPosition = addText("• Toastmasters International: Join local speaking clubs", 25, yPosition, pageWidth - 45, 9);
      yPosition = addText("• Speech Therapy: Consider professional coaching for advanced needs", 25, yPosition, pageWidth - 45, 9);

      // Footer
      const footerY = pageHeight - 20;
      pdf.setFontSize(8);
      pdf.setTextColor(128, 128, 128);
      pdf.text("Generated by SpeakCraft Speech Analysis System", pageWidth / 2, footerY, { align: 'center' });
      pdf.text("For professional development and speech improvement", pageWidth / 2, footerY + 5, { align: 'center' });

      // Save the PDF
      const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
      pdf.save(`SpeakCraft_Analysis_Report_${timestamp}.pdf`);
      
    } catch (error) {
      console.error("❌ Failed to generate professional PDF report:", error);
      alert("Failed to generate report. Please try again.");
    }
  };

  return (
    <div className="absolute top-[4rem] left-64 w-[calc(100%-17rem)] p-4 lg:p-8 flex justify-center items-center">
      <div className="w-full h-full bg-gradient-to-b from-[#003b46] to-[#07575b] dark:from-[#00171f] dark:to-[#003b46] text-white shadow-xl rounded-2xl p-4 lg:p-6 flex flex-col justify-center items-center">
        <div className="flex flex-col lg:flex-row w-full h-full gap-4 lg:gap-8">
          <div
            className="bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6]"
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              width: "100%",
              maxWidth: "500px",
              height: "auto",
              margin: "0 auto",
              borderRadius: "1rem",
              boxShadow: "0 4px 20px rgba(0, 0, 0, 0.2)",
              padding: "1.5rem",
            }}
          >
            <h2
              style={{
                fontSize: "1.25rem",
                color: "white",
                fontWeight: "600",
                marginBottom: "1.5rem",
              }}
            >
              Voice Recorder
            </h2>

            <div
              style={{
                width: "100%",
                background: "#ffffffa6",
                borderRadius: "0.75rem",
                padding: "1rem",
                height: "250px",
                display: "flex",
                flexDirection: "column",
                justifyContent: "center",
                alignItems: "center",
              }}
            >
              {/* Mic animation */}
              <div className="relative flex items-center mt-20 justify-center">
                {isRecording && !isPaused && (
                  <>
                    <motion.div
                      className="absolute w-32 h-32 border-2 border-blue-400 rounded-full"
                      animate={{ scale: [1, 1.2, 1] }}
                      transition={{ duration: 0.6, repeat: Infinity }}
                    />
                    <motion.div
                      className="absolute w-24 h-24 border-2 border-purple-400 rounded-full"
                      animate={{ scale: [1, 1.3, 1] }}
                      transition={{ duration: 0.8, repeat: Infinity }}
                    />
                    <motion.div
                      className="absolute w-16 h-16 border-2 border-pink-400 rounded-full"
                      animate={{ scale: [1, 1.4, 1] }}
                      transition={{ duration: 1, repeat: Infinity }}
                    />
                  </>
                )}

                <FaMicrophone
                  className={`text-black text-4xl ${
                    isRecording && !isPaused ? "animate-pulse" : "opacity-50"
                  }`}
                />
              </div>

              {/* Buttons */}
              <div
                className=" mt-10"
                style={{
                  display: "flex",
                  justifyContent: "center",
                  marginTop: "4rem",
                  marginBottom: "1rem",
                  gap: "1rem",
                  flexWrap: "wrap",
                }}
              >
                <button
                  onClick={handlePause}
                  disabled={!isRecording || isPaused}
                  style={{
                    backgroundColor: "white",
                    padding: "1rem",
                    borderRadius: "9999px",
                    boxShadow: "0 2px 6px rgba(0,0,0,0.3)",
                    opacity: !isRecording || isPaused ? 0.5 : 1,
                    cursor:
                      !isRecording || isPaused ? "not-allowed" : "pointer",
                  }}
                >
                  <FaPause style={{ fontSize: "1.5rem", color: "black" }} />
                </button>
                <button
                  onClick={handlePlay}
                  disabled={isRecording && !isPaused}
                  style={{
                    backgroundColor: "white",
                    padding: "1rem",
                    borderRadius: "9999px",
                    boxShadow: "0 2px 6px rgba(0,0,0,0.3)",
                    opacity: isRecording && !isPaused ? 0.5 : 1,
                    cursor:
                      isRecording && !isPaused ? "not-allowed" : "pointer",
                  }}
                >
                  <FaPlay style={{ fontSize: "1.5rem", color: "black" }} />
                </button>
                <button
                  onClick={handleStop}
                  disabled={!isRecording}
                  style={{
                    backgroundColor: "white",
                    padding: "1rem",
                    borderRadius: "9999px",
                    boxShadow: "0 2px 6px rgba(0,0,0,0.3)",
                    opacity: !isRecording ? 0.5 : 1,
                    cursor: !isRecording ? "not-allowed" : "pointer",
                  }}
                >
                  <FaStop style={{ fontSize: "1.5rem", color: "black" }} />
                </button>
              </div>
            </div>

            {/* Timer */}
            <p
              style={{
                color: "white",
                fontSize: "1.125rem",
                marginTop: "1rem",
              }}
            >
              Recording Time: {formatTime(recordTime)}
            </p>

            {/* Audio Playback */}
            {audioUrl && (
              <div
                style={{
                  marginTop: "1.5rem",
                  width: "100%",
                  padding: "1rem",
                  background: "#ffffffa6",
                  borderRadius: "0.75rem",
                  boxShadow: "0 4px 12px rgba(0,0,0,0.3)",
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "center",
                }}
              >
                <h4
                  className="font-semibold"
                  style={{
                    color: "black",
                    fontSize: "1rem",
                    marginBottom: "0.75rem",
                  }}
                >
                  Playback Preview
                </h4>

                <audio
                  controls
                  src={audioUrl}
                  style={{
                    width: "100%",
                    borderRadius: "0.5rem",
                    outline: "none",
                  }}
                />

                {/* Action Buttons */}
                <div
                  style={{ marginTop: "1rem", display: "flex", gap: "1rem", flexWrap: "wrap", justifyContent: "center" }}
                >
                  <button
                    onClick={() => setShowReportPreview(!showReportPreview)}
                    disabled={!audioUrl}
                    style={{
                      backgroundColor: !audioUrl ? "#666" : "#1e40af",
                      color: "white",
                      padding: "0.6rem 1.2rem",
                      borderRadius: "0.5rem",
                      border: "none",
                      fontWeight: "600",
                      cursor: !audioUrl ? "not-allowed" : "pointer",
                      boxShadow: "0 2px 6px rgba(0,0,0,0.3)",
                      transition: "all 0.3s ease",
                      opacity: !audioUrl ? 0.6 : 1,
                    }}
                  >
                    👁️ {showReportPreview ? "Hide Preview" : "Preview Report"}
                  </button>

                  <button
                    onClick={downloadPDFReport}
                    disabled={isGeneratingReport || !audioUrl}
                    style={{
                      backgroundColor: isGeneratingReport ? "#666" : "#025838",
                      color: "white",
                      padding: "0.6rem 1.2rem",
                      borderRadius: "0.5rem",
                      border: "none",
                      fontWeight: "600",
                      cursor: isGeneratingReport || !audioUrl ? "not-allowed" : "pointer",
                      boxShadow: "0 2px 6px rgba(0,0,0,0.3)",
                      transition: "all 0.3s ease",
                      opacity: !audioUrl ? 0.6 : 1,
                    }}
                    onMouseEnter={(e) => {
                      if (!isGeneratingReport && audioUrl) {
                        e.target.style.backgroundColor = "#034a2c";
                        e.target.style.transform = "translateY(-2px)";
                        e.target.style.boxShadow = "0 4px 12px rgba(0,0,0,0.4)";
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (!isGeneratingReport && audioUrl) {
                        e.target.style.backgroundColor = "#025838";
                        e.target.style.transform = "translateY(0)";
                        e.target.style.boxShadow = "0 2px 6px rgba(0,0,0,0.3)";
                      }
                    }}
                  >
                    {isGeneratingReport ? (
                      <>
                        <span style={{ animation: "spin 1s linear infinite", display: "inline-block", marginRight: "8px" }}>⏳</span>
                        Generating Report...
                      </>
                    ) : (
                      "📊 Generate Professional Report"
                    )}
                  </button>

                </div>

                {/* Report Preview */}
                {showReportPreview && audioUrl && (
                  <div style={{
                    marginTop: "1rem",
                    padding: "1rem",
                    backgroundColor: "#ffffffa6",
                    borderRadius: "0.75rem",
                    maxHeight: "300px",
                    overflowY: "auto"
                  }}>
                    <h4 style={{ color: "black", fontSize: "1rem", marginBottom: "0.75rem", fontWeight: "bold" }}>
                      📋 Report Preview
                    </h4>
                    
                    <div style={{ fontSize: "0.9rem", color: "black", lineHeight: "1.4" }}>
                      <div style={{ marginBottom: "0.5rem" }}>
                        <strong>📊 Executive Summary:</strong> {results.prediction?.toLowerCase() || 'optimal'} pacing with {results.consistencyScore?.toFixed(1) || '0'}% consistency
              </div>
                      
                      <div style={{ marginBottom: "0.5rem" }}>
                        <strong>🎯 Key Metrics:</strong>
                        <ul style={{ margin: "0.25rem 0 0 1rem", padding: 0 }}>
                          <li>Speech Rate: {results.wpm?.toFixed(1) || '0'} WPM</li>
                          <li>Pause Ratio: {results.pauseAnalysis?.pauseRatio?.toFixed(1) || '0'}%</li>
                          <li>Excessive Pauses: {results.pauseAnalysis?.excessivePauses || '0'}</li>
                          <li>AI Confidence: {(results.pauseAnalysis?.confidence * 100)?.toFixed(1) || '0'}%</li>
                        </ul>
                      </div>
                      
                      <div style={{ marginBottom: "0.5rem" }}>
                        <strong>🎯 Priority Actions:</strong>
                        <ul style={{ margin: "0.25rem 0 0 1rem", padding: 0 }}>
                          {results.suggestions && results.suggestions.filter(s => s.priority === "High").slice(0, 2).map((suggestion, index) => (
                            <li key={index} style={{ color: "#dc2626" }}>• {suggestion.issue}</li>
                          ))}
                          {results.suggestions && results.suggestions.filter(s => s.priority === "High").length === 0 && (
                            <li style={{ color: "#16a34a" }}>• No critical issues detected</li>
                          )}
                        </ul>
                      </div>
                      
                      <div style={{ fontSize: "0.8rem", color: "#666", marginTop: "0.5rem" }}>
                        Full report will include detailed analysis, charts, and comprehensive action plan.
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Enhanced Left Side Section - Quick Reference Only */}
            <div className="w-full mt-8 h-[500px] flex flex-col">
              {/* Speech Pace Management Tips & Guidelines */}
              <motion.div
                className="space-y-4 flex flex-col justify-start"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 0.3 }}
              >
                {/* Enhanced Quick Reference */}
                <motion.div
                  className="bg-gradient-to-br from-[#00171f] via-[#003b46] to-[#07575b] dark:from-[#003b46] dark:via-[#07575b] dark:to-[#0084a6] rounded-2xl p-6 border-2 border-[#00ccff]/60 shadow-2xl backdrop-blur-sm relative overflow-hidden h-[500px] flex flex-col justify-center"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.8, delay: 0.5 }}
                  whileHover={{ scale: 1.02, y: -2 }}
                >
                  {/* Glowing Border Effect */}
                  <div className="absolute inset-0 bg-gradient-to-r from-[#00ccff]/20 via-transparent to-[#00ccff]/20 rounded-2xl animate-pulse"></div>
                  
                  <div className="text-center mb-4 lg:mb-6 relative z-10">
                    <motion.h4 
                      className="text-[#00ccff] font-bold text-lg lg:text-xl mb-2 drop-shadow-lg"
                      animate={{ scale: [1, 1.05, 1] }}
                      transition={{ duration: 3, repeat: Infinity }}
                    >
                      📋 Speech Pace Quick Reference
                    </motion.h4>
                    <p className="text-white/90 text-xs lg:text-sm font-medium">Professional speaking standards & guidelines</p>
                  </div>

                  {/* Main Metrics Grid */}
                  <div className="grid grid-cols-2 gap-4 mb-6">
                                          <motion.div
                        className="bg-gradient-to-br from-emerald-500/30 to-green-500/30 dark:from-emerald-600/40 dark:to-green-600/40 rounded-xl p-3 lg:p-4 border-2 border-emerald-400/60 dark:border-emerald-300/60 text-center shadow-lg backdrop-blur-sm relative overflow-hidden"
                        whileHover={{ scale: 1.05, rotate: 1 }}
                        transition={{ type: "spring", stiffness: 300 }}
                      >
                        {/* Glowing Effect */}
                        <div className="absolute inset-0 bg-gradient-to-r from-emerald-400/10 via-transparent to-emerald-400/10 rounded-xl"></div>
                        
                        <motion.div
                          className="w-10 h-10 lg:w-12 lg:h-12 bg-gradient-to-br from-emerald-400 to-green-500 rounded-full flex items-center justify-center mx-auto mb-2 lg:mb-3 shadow-lg border-2 border-white/20"
                          animate={{ rotate: [0, 5, -5, 0] }}
                          transition={{ duration: 4, repeat: Infinity }}
                        >
                          <span className="text-white text-lg lg:text-xl drop-shadow-md">🎯</span>
                        </motion.div>
                        <div className="text-emerald-300 dark:text-emerald-200 font-bold text-base lg:text-lg drop-shadow-md">120-150</div>
                        <div className="text-white/90 text-xs font-semibold">WPM Range</div>
                        <div className="text-white/70 text-xs mt-1">Optimal Pace</div>
                      </motion.div>

                    <motion.div
                      className="bg-gradient-to-br from-blue-500/30 to-cyan-500/30 dark:from-blue-600/40 dark:to-cyan-600/40 rounded-xl p-3 lg:p-4 border-2 border-blue-400/60 dark:border-blue-300/60 text-center shadow-lg backdrop-blur-sm relative overflow-hidden"
                      whileHover={{ scale: 1.05, rotate: -1 }}
                      transition={{ type: "spring", stiffness: 300 }}
                    >
                      {/* Glowing Effect */}
                      <div className="absolute inset-0 bg-gradient-to-r from-blue-400/10 via-transparent to-blue-400/10 rounded-xl"></div>
                      
                      <motion.div
                        className="w-10 h-12 bg-gradient-to-br from-blue-400 to-cyan-500 rounded-full flex items-center justify-center mx-auto mb-2 lg:mb-3 shadow-lg border-2 border-white/20"
                        animate={{ rotate: [0, -5, 5, 0] }}
                        transition={{ duration: 4, delay: 1, repeat: Infinity }}
                      >
                        <span className="text-white text-lg lg:text-xl drop-shadow-md">⏱️</span>
                      </motion.div>
                      <div className="text-blue-300 dark:text-blue-200 font-bold text-base lg:text-lg drop-shadow-md">0.5-2s</div>
                      <div className="text-white/90 text-xs font-semibold">Pause Length</div>
                      <div className="text-white/70 text-xs mt-1">Strategic Timing</div>
                    </motion.div>

                    <motion.div
                      className="bg-gradient-to-br from-amber-500/30 to-orange-500/30 dark:from-amber-600/40 dark:to-orange-600/40 rounded-xl p-3 lg:p-4 border-2 border-amber-400/60 dark:border-amber-300/60 text-center shadow-lg backdrop-blur-sm relative overflow-hidden"
                      whileHover={{ scale: 1.05, rotate: 1 }}
                      transition={{ type: "spring", stiffness: 300 }}
                    >
                      {/* Glowing Effect */}
                      <div className="absolute inset-0 bg-gradient-to-r from-amber-400/10 via-transparent to-amber-400/10 rounded-xl"></div>
                      
                      <motion.div
                        className="w-10 h-10 lg:w-12 lg:h-12 bg-gradient-to-br from-amber-400 to-orange-500 rounded-full flex items-center justify-center mx-auto mb-2 lg:mb-3 shadow-lg border-2 border-white/20"
                        animate={{ rotate: [0, 5, -5, 0] }}
                        transition={{ duration: 4, delay: 2, repeat: Infinity }}
                      >
                        <span className="text-white text-lg lg:text-xl drop-shadow-md">📊</span>
                      </motion.div>
                      <div className="text-amber-300 dark:text-amber-200 font-bold text-base lg:text-lg drop-shadow-md">8-12%</div>
                      <div className="text-white/90 text-xs font-semibold">Pause Ratio</div>
                      <div className="text-white/70 text-xs mt-1">Total Speech</div>
                    </motion.div>

                    <motion.div
                      className="bg-gradient-to-br from-rose-500/30 to-pink-500/30 dark:from-rose-600/40 dark:to-pink-600/40 rounded-xl p-3 lg:p-4 border-2 border-rose-400/60 dark:border-rose-300/60 text-center shadow-lg backdrop-blur-sm relative overflow-hidden"
                      whileHover={{ scale: 1.05, rotate: -1 }}
                      transition={{ type: "spring", stiffness: 300 }}
                    >
                      {/* Glowing Effect */}
                      <div className="absolute inset-0 bg-gradient-to-r from-rose-400/10 via-transparent to-rose-400/10 rounded-xl"></div>
                      
                      <motion.div
                        className="w-10 h-10 lg:w-12 lg:h-12 bg-gradient-to-br from-rose-400 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-2 lg:mb-3 shadow-lg border-2 border-white/20"
                        animate={{ rotate: [0, -5, 5, 0] }}
                        transition={{ duration: 4, delay: 3, repeat: Infinity }}
                      >
                        <span className="text-white text-lg lg:text-xl drop-shadow-md">⚠️</span>
                      </motion.div>
                      <div className="text-rose-300 dark:text-rose-200 font-bold text-base lg:text-lg drop-shadow-md">&lt;5s</div>
                      <div className="text-white/90 text-xs font-semibold">Max Pause</div>
                      <div className="text-white/70 text-xs mt-1">Avoid Longer</div>
                    </motion.div>
                  </div>
                </motion.div>
              </motion.div>
            </div>
          </div>

          {/* Right side */}
          <div className="w-full flex flex-col">
            <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2 mb-4 overflow-x-auto">
              {/* Speech Rate Tab */}
              <button
                className={`px-3 lg:px-4 py-2 rounded-t-lg font-semibold transition-colors duration-200 text-sm lg:text-base whitespace-nowrap flex items-center gap-2 ${
                  activeTab === "rate"
                    ? "bg-[#d0ebff] text-[#003b46] dark:bg-[#004b5b] dark:text-white"
                    : "bg-[#e0f7fa] text-[#919b9e] dark:bg-[#002b36] dark:text-white/60"
                }`}
                onClick={() => setActiveTab("rate")}
              >
                <FaChartBar />
                Speech Rate
              </button>

              {/* Pause Analysis Tab */}
              <button
                className={`px-3 lg:px-4 py-2 rounded-t-lg font-semibold transition-colors duration-200 text-sm lg:text-base whitespace-nowrap flex items-center gap-2 ${
                  activeTab === "pause"
                    ? "bg-[#d0ebff] text-[#003b46] dark:bg-[#004b5b] dark:text-white"
                    : "bg-[#e0f7fa] text-[#919b9e] dark:bg-[#002b36] dark:text-white/60"
                }`}
                onClick={() => setActiveTab("pause")}
              >
                <FaClock />
                Pause Analysis
              </button>

              {/* Advanced Metrics Tab */}
              <button
                className={`px-3 lg:px-4 py-2 rounded-t-lg font-semibold transition-colors duration-200 text-sm lg:text-base whitespace-nowrap flex items-center gap-2 ${
                  activeTab === "advanced"
                    ? "bg-[#d0ebff] text-[#003b46] dark:bg-[#004b5b] dark:text-white"
                    : "bg-[#e0f7fa] text-[#919b9e] dark:bg-[#002b36] dark:text-white/60"
                }`}
                onClick={() => setActiveTab("advanced")}
              >
                <FaBrain />
                AI Insights
              </button>

            </div>
            {activeTab === "rate" && (
              <div
                style={{
                  left: "-9999px",
                  top: 0,
                 
                  pointerEvents: "none",
                }}
                id="pdf-report"
                className="flex flex-col w-full"
              >
                <h2 className="text-xl lg:text-2xl font-bold text-white mt-7 mb-4">
                  Speech Rate Analysis
                </h2>

                {/* Metrics Grid */}
                <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-3 lg:gap-6 w-full">
                  {/* Word Count */}
                  <div className="flex flex-col items-center rounded-lg p-3 lg:p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6]">
                    <h3 className="text-white text-sm lg:text-lg font-semibold mb-2">
                      Word Count
                    </h3>
                    <div className="flex justify-center items-center rounded-full w-20 h-20 lg:w-24 lg:h-24 xl:w-32 xl:h-32 bg-white/10 text-white text-lg lg:text-xl xl:text-2xl font-semibold">
                      {results.wordCount}
                    </div>
                  </div>

                  {/* WPM Gauge */}
                  <div className="flex flex-col items-center rounded-lg p-3 lg:p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6]">
                    <h3 className="text-white text-sm lg:text-lg font-semibold mb-2">
                      Speech Rate
                    </h3>
                    <GaugeChart
                      id="wpm-gauge"
                      nrOfLevels={30}
                      colors={["#ff0000", "#ff9900", "#00cc00"]}
                      arcWidth={0.3}
                      percent={results.wpm / 200}
                      textColor="#fff"
                      style={{
                        width: "100%",
                        minWidth: "12rem",
                        height: "6rem",
                      }}
                    />
                    <p className="mt-1 text-white font-medium text-sm lg:text-base">
                      {results.prediction || getWpmLabel(results.wpm)} ({results.wpm.toFixed(1)} WPM)
                    </p>
                  </div>

                  {/* Duration */}
                  <div className="flex flex-col items-center rounded-lg p-3 lg:p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6]">
                    <h3 className="text-white text-sm lg:text-lg font-semibold mb-2">
                      Duration
                    </h3>
                    <div className="flex flex-col justify-center items-center rounded-full w-20 h-20 lg:w-24 lg:h-24 xl:w-32 xl:h-32 bg-white/10 text-white text-lg lg:text-xl xl:text-2xl font-semibold">
                      <FaClock className="text-white text-xl lg:text-2xl mb-1" />
                      <span>{formatTime(results.duration)}</span>
                    </div>
                  </div>

                  {/* Confidence & Feedback */}
                  <div className="flex flex-col items-center w-full rounded-lg p-3 lg:p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6]">
                    <h3 className="text-white text-sm lg:text-lg font-semibold mb-2">
                      Pacing Consistency
                    </h3>
                    <div className="w-full bg-white/20 rounded-full h-3 lg:h-4 overflow-hidden mb-2">
                      <div
                        className={`h-3 lg:h-4 rounded-full transition-all duration-500 ${
                          results.consistencyScore >= 80
                            ? "bg-green-400"
                            : results.consistencyScore >= 60
                            ? "bg-yellow-400"
                            : "bg-red-400"
                        }`}
                        style={{ width: `${results.consistencyScore}%` }}
                      ></div>
                    </div>
                    <p className="text-white text-sm lg:text-md font-semibold">
                      {results.consistencyScore?.toFixed(1)}%
                    </p>
                  </div>
                </div>
                {/* Enhanced Feedback Section */}
                <div className="mt-6 space-y-4">
                  {/* Overall Assessment */}
                  <div className="w-full text-center px-4 py-4 rounded-xl font-semibold shadow-lg bg-gradient-to-r from-[#00171f] to-[#003b46] border-2 border-[#00ccff]/40">
                    <h3 className="text-[#00ccff] text-lg lg:text-xl mb-2">🎯 Overall Assessment</h3>
                    <p className="text-white text-base lg:text-lg">{results.feedback}</p>
                  </div>

                  {/* Enhanced Feedback Details - Frontend Calculated */}
                  {results.rateEnhancedFeedback && (
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                      {/* Pace Analysis */}
                      <div className="bg-gradient-to-br from-[#00171f] to-[#003b46] rounded-xl p-4 border-2 border-white/20">
                        <div className="flex items-center gap-2 mb-3">
                          <span className="text-2xl">{results.rateEnhancedFeedback.pace_analysis?.emoji}</span>
                          <h4 className="text-white font-semibold">Pace Analysis</h4>
                        </div>
                        <div className="text-white/90 text-sm mb-3">
                          {results.rateEnhancedFeedback.pace_analysis?.feedback}
                        </div>
                        <div className="space-y-2">
                          {results.rateEnhancedFeedback.pace_analysis?.suggestions?.slice(0, 2).map((suggestion, index) => (
                            <div key={index} className="text-white/70 text-xs bg-white/10 rounded-lg p-2">
                              💡 {suggestion}
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Consistency Analysis */}
                      <div className="bg-gradient-to-br from-[#00171f] to-[#003b46] rounded-xl p-4 border-2 border-white/20">
                        <div className="flex items-center gap-2 mb-3">
                          <span className="text-2xl">{results.rateEnhancedFeedback.consistency_analysis?.emoji}</span>
                          <h4 className="text-white font-semibold">Consistency</h4>
                        </div>
                        <div className="text-white/90 text-sm mb-3">
                          {results.rateEnhancedFeedback.consistency_analysis?.feedback}
                        </div>
                        {results.rateEnhancedFeedback.consistency_analysis?.score && (
                          <div className="text-white/70 text-xs mb-2">
                            Score: {results.rateEnhancedFeedback.consistency_analysis.score.toFixed(1)}%
                          </div>
                        )}
                        <div className="space-y-2">
                          {results.rateEnhancedFeedback.consistency_analysis?.suggestions?.slice(0, 2).map((suggestion, index) => (
                            <div key={index} className="text-white/70 text-xs bg-white/10 rounded-lg p-2">
                              💡 {suggestion}
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Flow Analysis */}
                      <div className="bg-gradient-to-br from-[#00171f] to-[#003b46] rounded-xl p-4 border-2 border-white/20">
                        <div className="flex items-center gap-2 mb-3">
                          <span className="text-2xl">{results.rateEnhancedFeedback.flow_analysis?.emoji}</span>
                          <h4 className="text-white font-semibold">Speech Flow</h4>
                        </div>
                        <div className="text-white/90 text-sm mb-3">
                          {results.rateEnhancedFeedback.flow_analysis?.feedback}
                        </div>
                        {results.rateEnhancedFeedback.flow_analysis?.words_per_second && (
                          <div className="text-white/70 text-xs mb-2">
                            Flow Rate: {results.rateEnhancedFeedback.flow_analysis.words_per_second.toFixed(1)} words/sec
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>

                {/* 🧠 Pacing Curve Section */}
                <div className="mt-5 w-full p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                  <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">
                    Speech Pacing Curve
                  </h3>

                  <ResponsiveContainer width="100%" height={250}>
                    <LineChart data={results.pacingCurve}>
                      <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
                      <XAxis
                        dataKey="time"
                        tick={{ fill: "#fff" }}
                        label={{
                          value: "Time",
                          position: "insideBottom",
                          fill: "#fff",
                        }}
                      />
                      <YAxis
                        domain={[0, 250]}
                        tick={{ fill: "#fff" }}
                        label={{
                          value: "WPM",
                          angle: -90,
                          position: "insideLeft",
                          fill: "#fff",
                        }}
                      />
                      <Tooltip
                        contentStyle={{
                          backgroundColor: "#002b36",
                          border: "none",
                          borderRadius: "8px",
                          color: "white",
                        }}
                      />

                      {/* 🔵 Actual WPM */}
                      <Line
                        type="monotone"
                        dataKey="wpm"
                        stroke="#00ccff"
                        strokeWidth={2}
                        dot={false}
                      />

                      {/* 🟢 Upper dashed */}
                      <Line
                        type="monotone"
                        dataKey="upper"
                        stroke="#00ff00"
                        strokeDasharray="5 5"
                        strokeWidth={2}
                        dot={false}
                        name="Upper Ideal Pace"
                      />

                      {/* 🟠 Lower dashed */}
                      <Line
                        type="monotone"
                        dataKey="lower"
                        stroke="#ff9900"
                        strokeDasharray="5 5"
                        strokeWidth={2}
                        dot={false}
                        name="Lower Ideal Pace"
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </div>
            )}

            {activeTab === "pause" && (
              <div className="flex flex-col w-full h-full">
                <h2 className="text-xl lg:text-2xl font-bold text-white mt-2 mb-4">
                  Pause Analysis & Timing
                </h2>

                {/* Use frontend-calculated data */}
                {(() => {
                  // Use frontend-calculated advanced metrics and suggestions
                  const frontendAdvancedMetrics = results.advancedMetrics || {};
                  const frontendSuggestions = results.suggestions || [];
                  
                  return (
                    <>

                {/* AI Model Prediction Section */}
                <div className="mb-6 p-4 bg-gradient-to-r from-[#00171f] to-[#003b46] rounded-lg border-2 border-[#00ccff]/40">
                  <h3 className="text-[#00ccff] text-lg font-semibold mb-3">🤖 AI Pause Analysis</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="text-center">
                      <div className="text-white text-2xl font-bold mb-1">
                        {results.pausePrediction?.replace(/_/g, ' ').toUpperCase() || "ANALYZING"}
                      </div>
                      <div className="text-white/70 text-sm">AI Prediction</div>
                    </div>
                      <div className="text-center">
                        <div className="text-[#00ccff] text-2xl font-bold mb-1">
                         {(results.pauseAnalysis.confidence * 100).toFixed(1)}%
                        </div>
                        <div className="text-white/70 text-sm">Confidence Score</div>
                      </div>
                    <div className="text-center">
                      <div className="text-green-400 text-lg font-bold mb-1">
                        {results.pauseAnalysis.suggestions?.length || 0}
                      </div>
                      <div className="text-white/70 text-sm">Frontend Suggestions</div>
                    </div>
                  </div>
                  
                  {/* Top Frontend-Calculated Suggestions */}
                  {results.pauseAnalysis.suggestions && results.pauseAnalysis.suggestions.length > 0 && (
                    <div className="mt-4">
                      <h4 className="text-white font-semibold mb-2">💡 Frontend-Calculated Recommendations:</h4>
                      <div className="space-y-2">
                        {results.pauseAnalysis.suggestions.slice(0, 3).map((suggestion, index) => (
                          <div key={index} className="text-white/90 text-sm bg-white/10 rounded-lg p-2">
                            {suggestion}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* Critical Pause Metrics Grid */}
                <div className="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-3 lg:gap-6 mb-6">
                  <div className="flex flex-col items-center rounded-lg p-3 lg:p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6]">
                    <h3 className="text-white text-sm lg:text-lg font-semibold mb-2">🚨 Excessive Pauses</h3>
                    <div className="flex justify-center items-center rounded-full w-16 h-16 lg:w-20 lg:h-20 bg-red-500/30 text-red-300 text-xl font-semibold border-2 border-red-500/50">
                      {calculateExcessivePauses()}
                    </div>
                    <p className="text-white/70 text-xs mt-1">{'>'}5.0s (Industry Standard)</p>
                  </div>

                  <div className="flex flex-col items-center rounded-lg p-3 lg:p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6]">
                    <h3 className="text-white text-sm lg:text-lg font-semibold mb-2">⏱️ Max Pause</h3>
                    <div className="flex justify-center items-center rounded-full w-16 h-16 lg:w-20 lg:h-20 bg-orange-500/20 text-orange-300 text-lg font-semibold">
                      {(results.pauseAnalysis?.pauseMax || 0).toFixed(1)}s
                    </div>
                    <p className="text-white/70 text-xs mt-1">Longest pause</p>
                  </div>

                  <div className="flex flex-col items-center rounded-lg p-3 lg:p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6]">
                    <h3 className="text-white text-sm lg:text-lg font-semibold mb-2">📊 Pause Ratio</h3>
                    <div className="flex justify-center items-center rounded-full w-16 h-16 lg:w-20 lg:h-20 bg-blue-500/20 text-blue-300 text-lg font-semibold">
                      {(results.pauseAnalysis?.pauseRatio || 0).toFixed(1)}%
                    </div>
                    <p className="text-white/70 text-xs mt-1">Target: 8-12%</p>
                  </div>

                  <div className="flex flex-col items-center rounded-lg p-3 lg:p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6]">
                    <h3 className="text-white text-sm lg:text-lg font-semibold mb-2">🎯 Pause Efficiency</h3>
                    <div className="flex justify-center items-center rounded-full w-16 h-16 lg:w-20 lg:h-20 bg-green-500/20 text-green-300 text-lg font-semibold">
                      {(results.pauseAnalysis?.pauseEfficiency || 0).toFixed(1)}s
                    </div>
                    <p className="text-white/70 text-xs mt-1">Avg pause length</p>
                  </div>
                </div>

                {/* Advanced Pause Statistics */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <div className="p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h4 className="text-white font-semibold mb-2">📈 Pause Statistics</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between text-white/80">
                        <span>P50 (Median):</span>
                        <span>{(results.pauseAnalysis?.averagePauseLength || 0).toFixed(2)}s</span>
                    </div>
                      <div className="flex justify-between text-white/80">
                        <span>P90:</span>
                        <span>{(results.pauseAnalysis?.pauseP90 || 0).toFixed(2)}s</span>
                  </div>
                      <div className="flex justify-between text-white/80">
                        <span>P95:</span>
                        <span>{(results.pauseAnalysis?.pauseP95 || 0).toFixed(2)}s</span>
                      </div>
                      <div className="flex justify-between text-white/80">
                        <span>Std Dev:</span>
                        <span>{(results.pauseAnalysis?.pauseStd || 0).toFixed(2)}s</span>
                      </div>
                    </div>
                  </div>

                  <div className="p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h4 className="text-white font-semibold mb-2">🔄 Pattern Analysis</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between text-white/80">
                        <span>Regularity:</span>
                        <span>{((results.pauseAnalysis?.pausePatternRegularity || 0) * 100).toFixed(1)}%</span>
                      </div>
                      <div className="flex justify-between text-white/80">
                        <span>Spacing Consistency:</span>
                        <span>{((results.pauseAnalysis?.pauseSpacingConsistency || 0) * 100).toFixed(1)}%</span>
                      </div>
                      <div className="flex justify-between text-white/80">
                        <span>Max Long Streak:</span>
                        <span>{results.pauseAnalysis?.maxLongStreak || 0}</span>
                      </div>
                      <div className="flex justify-between text-white/80">
                        <span>Total Pause Time:</span>
                        <span>{(results.pauseAnalysis?.totalPauseTime || 0).toFixed(1)}s</span>
                      </div>
                    </div>
                  </div>

                  <div className="p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h4 className="text-white font-semibold mb-2">🎭 Context Analysis</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between text-white/80">
                        <span>Transition Pauses:</span>
                        <span>{results.advancedMetrics?.transition_pause_count || 0}</span>
                      </div>
                      <div className="flex justify-between text-white/80">
                        <span>Emphasis Pauses:</span>
                        <span>{results.advancedMetrics?.emphasis_pause_count || 0}</span>
                      </div>
                      <div className="flex justify-between text-white/80">
                        <span>Optimal Transitions:</span>
                        <span>{(results.advancedMetrics?.optimal_transition_ratio || 0).toFixed(1)}%</span>
                      </div>
                      <div className="flex justify-between text-white/80">
                        <span>Optimal Emphasis:</span>
                        <span>{(results.advancedMetrics?.optimal_emphasis_ratio || 0).toFixed(1)}%</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Charts Row */}
                <div className="flex flex-col lg:flex-row gap-4 mb-4">
                  {/* Pause Timeline */}
                  <div className="w-full p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">Pause Timeline</h3>
                    <ResponsiveContainer width="100%" height={200}>
                      <ScatterChart data={results.pauseTimeline || []}>
                        <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                        <XAxis dataKey="time" tick={{ fill: "#fff" }} label={{ value: "Time (s)", position: "insideBottom", fill: "#fff" }} />
                        <YAxis dataKey="duration" tick={{ fill: "#fff" }} label={{ value: "Duration (s)", angle: -90, position: "insideLeft", fill: "#fff" }} />
                        <Tooltip
                          contentStyle={{ backgroundColor: "#002b36", border: "none", borderRadius: "8px", color: "white" }}
                          formatter={(value, name) => [value, name === "duration" ? "Pause Duration" : name]}
                        />
                        <Scatter
                          dataKey="duration"
                          fill={(entry) => {
                            if (entry?.type === "short") return "#00ff00";
                            if (entry?.type === "medium") return "#ffaa00";
                            return "#ff0000";
                          }}
                        />
                      </ScatterChart>
                    </ResponsiveContainer>
                  </div>

                  {/* Pause Distribution */}
                  <div className="w-full p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">Pause Distribution</h3>
                    <ResponsiveContainer width="100%" height={200}>
                      <PieChart>
                        <Pie
                          data={results.pauseDistribution || []}
                          dataKey="percentage"
                          nameKey="type"
                          cx="50%"
                          cy="50%"
                          outerRadius={80}
                          label={({ type, percentage }) => `${type}: ${percentage}%`}
                        >
                          {(results.pauseDistribution || []).map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.color} />
                          ))}
                        </Pie>
                        <Tooltip
                          contentStyle={{ backgroundColor: "#002b36", border: "none", borderRadius: "8px", color: "white" }}
                        />
                      </PieChart>
                    </ResponsiveContainer>
                  </div>
                </div>

                {/* Pause-Specific Recommendations */}
                <div className="w-full p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                  <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">🎯 Pause-Specific Recommendations</h3>
                  
                  {/* High Priority Pause Issues */}
                  {frontendSuggestions.filter(s => s.priority === "High").length > 0 && (
                    <div className="mb-6">
                      <h4 className="text-red-300 text-lg font-semibold mb-3">🚨 High Priority Pause Issues</h4>
                      <div className="space-y-3">
                        {frontendSuggestions.filter(s => s.priority === "High").map((suggestion, index) => (
                          <div key={index} className="p-4 rounded-lg border-2 bg-red-500/20 border-red-500/50">
                            <div className="flex items-center gap-2 mb-2">
                              <span className="px-2 py-1 rounded-full text-xs font-bold bg-red-500 text-white">
                                {suggestion.priority}
                              </span>
                              <h4 className="text-white font-semibold">{suggestion.issue}</h4>
                            </div>
                            <p className="text-white/90 text-sm mb-2">{suggestion.action}</p>
                            <p className="text-white/70 text-xs bg-white/10 rounded p-2">
                              📊 {suggestion.current} → 🎯 {suggestion.target}
                            </p>
                            <p className="text-red-200 text-xs mt-1">{suggestion.impact}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Medium Priority Pause Issues */}
                  {frontendSuggestions.filter(s => s.priority === "Medium").length > 0 && (
                    <div className="mb-6">
                      <h4 className="text-yellow-300 text-lg font-semibold mb-3">⚠️ Medium Priority Pause Issues</h4>
                      <div className="space-y-3">
                        {frontendSuggestions.filter(s => s.priority === "Medium").map((suggestion, index) => (
                          <div key={index} className="p-4 rounded-lg border-2 bg-yellow-500/20 border-yellow-500/50">
                            <div className="flex items-center gap-2 mb-2">
                              <span className="px-2 py-1 rounded-full text-xs font-bold bg-yellow-500 text-white">
                                {suggestion.priority}
                              </span>
                              <h4 className="text-white font-semibold">{suggestion.issue}</h4>
                            </div>
                            <p className="text-white/90 text-sm mb-2">{suggestion.action}</p>
                            <p className="text-white/70 text-xs bg-white/10 rounded p-2">
                              📊 {suggestion.current} → 🎯 {suggestion.target}
                            </p>
                            <p className="text-yellow-200 text-xs mt-1">{suggestion.impact}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Low Priority Pause Issues */}
                  {frontendSuggestions.filter(s => s.priority === "Low").length > 0 && (
                    <div className="mb-6">
                      <h4 className="text-green-300 text-lg font-semibold mb-3">💡 Low Priority Pause Refinements</h4>
                      <div className="space-y-3">
                        {frontendSuggestions.filter(s => s.priority === "Low").map((suggestion, index) => (
                          <div key={index} className="p-4 rounded-lg border-2 bg-green-500/20 border-green-500/50">
                            <div className="flex items-center gap-2 mb-2">
                              <span className="px-2 py-1 rounded-full text-xs font-bold bg-green-500 text-white">
                                {suggestion.priority}
                              </span>
                              <h4 className="text-white font-semibold">{suggestion.issue}</h4>
                            </div>
                            <p className="text-white/90 text-sm mb-2">{suggestion.action}</p>
                            <p className="text-white/70 text-xs bg-white/10 rounded p-2">
                              📊 {suggestion.current} → 🎯 {suggestion.target}
                            </p>
                            <p className="text-green-200 text-xs mt-1">{suggestion.impact}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Fallback if no recommendations */}
                  {frontendSuggestions.length === 0 && (
                    <div className="text-center py-8">
                      <p className="text-white/70 text-lg">No specific pause issues detected!</p>
                      <p className="text-white/50 text-sm mt-2">Your pause management is within acceptable ranges.</p>
                    </div>
                  )}
                </div>
                    </>
                  );
                })()}
              </div>
            )}

            {activeTab === "advanced" && (
              <div className="flex flex-col w-full h-full">
                <h2 className="text-xl lg:text-2xl font-bold text-white mt-2 mb-4">
                  AI-Powered Insights
                </h2>

                {/* Use frontend-calculated data */}
                {(() => {
                  // Use frontend-calculated advanced metrics and suggestions
                  const frontendAdvancedMetrics = results.advancedMetrics || {};
                  const frontendPriorityImprovements = results.priorityImprovements || [];
                  
                  return (
                    <>

                {/* AI Model Probabilities */}
                {results.pauseAnalysis.probabilities && Object.keys(results.pauseAnalysis.probabilities).length > 0 && (
                  <div className="mb-6 p-4 bg-gradient-to-r from-[#00171f] to-[#003b46] rounded-lg border-2 border-[#00ccff]/40">
                    <h3 className="text-[#00ccff] text-lg font-semibold mb-3">🎯 AI Model Probabilities</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                      {Object.entries(results.pauseAnalysis.probabilities).map(([label, probability]) => (
                        <div key={label} className="bg-white/10 rounded-lg p-3">
                          <div className="flex justify-between items-center mb-2">
                            <span className="text-white text-sm font-medium">
                              {label.replace(/_/g, ' ').toUpperCase()}
                            </span>
                            <span className="text-[#00ccff] text-sm font-bold">
                              {(probability * 100).toFixed(1)}%
                            </span>
                          </div>
                          <div className="w-full bg-white/20 rounded-full h-2">
                            <div
                              className="h-2 rounded-full bg-gradient-to-r from-[#00ccff] to-[#0099cc]"
                              style={{ width: `${probability * 100}%` }}
                            ></div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Toastmasters Compliance & Advanced Metrics */}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                  {/* Toastmasters Score */}
                  <div className="p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">🏆 Toastmasters Compliance</h3>
                    <GaugeChart
                      id="toastmasters-gauge"
                      nrOfLevels={20}
                      colors={["#ff0000", "#ff9900", "#00cc00"]}
                      arcWidth={0.3}
                      percent={(results.advancedMetrics?.toastmasters_score || 0) / 100}
                      textColor="#fff"
                      style={{ width: "100%", height: "200px" }}
                    />
                    <p className="text-white text-center mt-2">
                      {(results.advancedMetrics?.toastmasters_score || 0).toFixed(1)}% Industry Standard
                    </p>
          </div>

                  {/* Advanced Metrics Radar */}
                  <div className="p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">📊 Performance Radar</h3>
                    <ResponsiveContainer width="100%" height={200}>
                      <RadarChart data={[
                        { metric: "Rhythm Consistency", value: results.advancedMetrics?.rhythm_consistency || 0 },
                        { metric: "Confidence Score", value: results.advancedMetrics?.confidence_score || 0 },
                        { metric: "Speaking Efficiency", value: results.advancedMetrics?.speaking_efficiency || 0 },
                        { metric: "Contextual Pause Score", value: results.advancedMetrics?.contextual_score || 0 },
                        { metric: "Cognitive Load", value: results.advancedMetrics?.cognitive_load || 0 },
                        { metric: "Golden Ratio Pauses", value: results.advancedMetrics?.golden_ratio_pauses || 0 },
                        { metric: "Words Per Minute Consistency", value: results.advancedMetrics?.wpm_consistency || 0 },
                        { metric: "Words Per Minute Stability", value: results.advancedMetrics?.wpm_stability || 0 },
                        { metric: "Pause Pattern Regularity", value: results.advancedMetrics?.pause_pattern_regularity || 0 },
                        { metric: "Speech Flow Continuity", value: results.advancedMetrics?.speech_continuity || 0 },
                      ]}>
                        <PolarGrid />
                        <PolarAngleAxis dataKey="metric" tick={{ fill: "#fff", fontSize: 10 }} />
                        <PolarRadiusAxis domain={[0, 100]} tick={{ fill: "#fff", fontSize: 8 }} />
                        <Radar dataKey="value" stroke="#00ccff" fill="#00ccff" fillOpacity={0.3} strokeWidth={2} />
                      </RadarChart>
                    </ResponsiveContainer>
                  </div>
                </div>

                {/* Comprehensive AI Insights Grid */}
                <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4 mb-6">
                  <div className="p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h4 className="text-white font-semibold mb-2">🎵 Rhythm Consistency</h4>
                    <div className="w-full bg-white/20 rounded-full h-3 mb-2">
                      <div
                        className="h-3 rounded-full bg-gradient-to-r from-blue-400 to-blue-600"
                        style={{ width: `${results.advancedMetrics?.rhythm_consistency || 0}%` }}
                      ></div>
                    </div>
                    <p className="text-white/70 text-sm">{(results.advancedMetrics?.rhythm_consistency || 0).toFixed(1)}%</p>
                    <p className="text-white/50 text-xs">Outliers: {results.advancedMetrics?.rhythm_outliers || 0}</p>
                  </div>

                  <div className="p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h4 className="text-white font-semibold mb-2">💪 Confidence Score</h4>
                    <div className="w-full bg-white/20 rounded-full h-3 mb-2">
                      <div
                        className="h-3 rounded-full bg-gradient-to-r from-green-400 to-green-600"
                        style={{ width: `${results.advancedMetrics?.confidence_score || 0}%` }}
                      ></div>
                    </div>
                    <p className="text-white/70 text-sm">{(results.advancedMetrics?.confidence_score || 0).toFixed(1)}%</p>
                    <p className="text-white/50 text-xs">Memory Retrieval: {results.advancedMetrics?.memory_retrieval_pauses || 0}</p>
                  </div>

                  <div className="p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h4 className="text-white font-semibold mb-2">⚡ Speaking Efficiency</h4>
                    <div className="w-full bg-white/20 rounded-full h-3 mb-2">
                      <div
                        className="h-3 rounded-full bg-gradient-to-r from-purple-400 to-purple-600"
                        style={{ width: `${results.advancedMetrics?.speaking_efficiency || 0}%` }}
                      ></div>
                    </div>
                    <p className="text-white/70 text-sm">{(results.advancedMetrics?.speaking_efficiency || 0).toFixed(1)}%</p>
                    <p className="text-white/50 text-xs">Pause Efficiency: {(results.advancedMetrics?.pause_efficiency || 0).toFixed(1)}s</p>
                  </div>

                  <div className="p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h4 className="text-white font-semibold mb-2">🧠 Cognitive Load</h4>
                    <div className="w-full bg-white/20 rounded-full h-3 mb-2">
                      <div
                        className="h-3 rounded-full bg-gradient-to-r from-orange-400 to-orange-600"
                        style={{ width: `${results.advancedMetrics?.cognitive_load || 0}%` }}
                      ></div>
                    </div>
                    <p className="text-white/70 text-sm">{(results.advancedMetrics?.cognitive_load || 0).toFixed(1)}%</p>
                    <p className="text-white/50 text-xs">Optimal Ratio: {(results.advancedMetrics?.optimal_cognitive_pause_ratio || 0).toFixed(1)}%</p>
                  </div>
                </div>

                {/* Advanced Statistical Analysis */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                  <div className="p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h4 className="text-white font-semibold mb-3">📊 Advanced Statistics</h4>
                    <div className="space-y-3">
                      <div className="flex justify-between items-center">
                        <span className="text-white/80 text-sm">Pause Pattern Randomness:</span>
                        <div className="flex items-center gap-2">
                          <div className="w-16 bg-white/20 rounded-full h-2">
                            <div
                              className="h-2 rounded-full bg-gradient-to-r from-cyan-400 to-cyan-600"
                              style={{ width: `${results.advancedMetrics?.pause_entropy || 0}%` }}
                            ></div>
                          </div>
                          <span className="text-white text-sm">{(results.advancedMetrics?.pause_entropy || 0).toFixed(1)}%</span>
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-white/80 text-sm">Pause Pattern Repetition:</span>
                        <div className="flex items-center gap-2">
                          <div className="w-16 bg-white/20 rounded-full h-2">
                            <div
                              className="h-2 rounded-full bg-gradient-to-r from-pink-400 to-pink-600"
                              style={{ width: `${results.advancedMetrics?.pause_autocorrelation || 0}%` }}
                            ></div>
                          </div>
                          <span className="text-white text-sm">{(results.advancedMetrics?.pause_autocorrelation || 0).toFixed(1)}%</span>
                        </div>
                      </div>
                      <div className="flex justify-between items-center">
                        <span className="text-white/80 text-sm">Pause Duration Trends:</span>
                        <div className="flex items-center gap-2">
                          <div className="w-16 bg-white/20 rounded-full h-2">
                            <div
                              className="h-2 rounded-full bg-gradient-to-r from-yellow-400 to-yellow-600"
                              style={{ width: `${results.advancedMetrics?.pause_trend_analysis || 0}%` }}
                            ></div>
                          </div>
                          <span className="text-white text-sm">{(results.advancedMetrics?.pause_trend_analysis || 0).toFixed(1)}%</span>
                        </div>
                      </div>
                      <div className="flex justify-between text-white/80 text-sm">
                        <span>Pause Pattern Complexity:</span>
                        <span>{(results.advancedMetrics?.pause_fractal_dimension || 0).toFixed(3)}</span>
                      </div>
                      <div className="flex justify-between text-white/80 text-sm">
                        <span>Pause Duration Variation:</span>
                        <span>{(results.advancedMetrics?.pause_volatility || 0).toFixed(2)}</span>
                      </div>
                    </div>
                  </div>

                  <div className="p-4 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
                    <h4 className="text-white font-semibold mb-3">🎯 Pace Management</h4>
                    <div className="space-y-3">
                      <div className="flex justify-between items-center">
                        <span className="text-white/80 text-sm">Words Per Minute Consistency:</span>
                        <div className="flex items-center gap-2">
                          <div className="w-16 bg-white/20 rounded-full h-2">
                            <div
                              className="h-2 rounded-full bg-gradient-to-r from-emerald-400 to-emerald-600"
                              style={{ width: `${results.advancedMetrics?.wpm_consistency || 0}%` }}
                            ></div>
                          </div>
                          <span className="text-white text-sm">{(results.advancedMetrics?.wpm_consistency || 0).toFixed(1)}%</span>
                        </div>
                      </div>
                      <div className="flex justify-between text-white/80 text-sm">
                        <span>Words Per Minute Stability:</span>
                        <span>{(results.advancedMetrics?.wpm_stability || 0).toFixed(1)}%</span>
                      </div>
                      <div className="flex justify-between text-white/80 text-sm">
                        <span>Speaking Speed Changes:</span>
                        <span>{(results.advancedMetrics?.wpm_acceleration || 0).toFixed(2)}</span>
                      </div>
                      <div className="flex justify-between text-white/80 text-sm">
                        <span>Pause Spacing Patterns:</span>
                        <span>{(results.advancedMetrics?.gap_clustering || 0).toFixed(2)}</span>
                      </div>
                      <div className="flex justify-between text-white/80 text-sm">
                        <span>Speech Flow Continuity:</span>
                        <span>{(results.advancedMetrics?.speech_continuity || 0).toFixed(1)}%</span>
                      </div>
                    </div>
                  </div>
                </div>

        {/* Comprehensive AI-Generated Improvements */}
        <div className="mt-6 p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
          <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">🧠 AI-Generated Comprehensive Improvements</h3>
          
          {/* High Priority Issues */}
          {frontendPriorityImprovements.filter(s => s.priority === "High").length > 0 && (
            <div className="mb-6">
              <h4 className="text-red-300 text-lg font-semibold mb-3">🚨 High Priority Speech Issues</h4>
              <div className="space-y-3">
                {frontendPriorityImprovements.filter(s => s.priority === "High").map((suggestion, index) => (
                  <div key={index} className="p-4 rounded-lg border-2 bg-red-500/20 border-red-500/50">
                    <div className="flex items-center gap-2 mb-2">
                      <span className="px-2 py-1 rounded-full text-xs font-bold bg-red-500 text-white">
                        {suggestion.priority}
                      </span>
                      <h4 className="text-white font-semibold">{suggestion.issue}</h4>
                    </div>
                    <p className="text-white/90 text-sm mb-2">{suggestion.action}</p>
                    <p className="text-white/70 text-xs bg-white/10 rounded p-2">
                      📊 {suggestion.current} → 🎯 {suggestion.target}
                    </p>
                    <p className="text-red-200 text-xs mt-1">{suggestion.impact}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Medium Priority Issues */}
          {frontendPriorityImprovements.filter(s => s.priority === "Medium").length > 0 && (
            <div className="mb-6">
              <h4 className="text-yellow-300 text-lg font-semibold mb-3">⚠️ Medium Priority Improvements</h4>
              <div className="space-y-3">
                {frontendPriorityImprovements.filter(s => s.priority === "Medium").map((suggestion, index) => (
                  <div key={index} className="p-4 rounded-lg border-2 bg-yellow-500/20 border-yellow-500/50">
                    <div className="flex items-center gap-2 mb-2">
                      <span className="px-2 py-1 rounded-full text-xs font-bold bg-yellow-500 text-white">
                        {suggestion.priority}
                      </span>
                      <h4 className="text-white font-semibold">{suggestion.issue}</h4>
                    </div>
                    <p className="text-white/90 text-sm mb-2">{suggestion.action}</p>
                    <p className="text-white/70 text-xs bg-white/10 rounded p-2">
                      📊 {suggestion.current} → 🎯 {suggestion.target}
                    </p>
                    <p className="text-yellow-200 text-xs mt-1">{suggestion.impact}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Low Priority Issues */}
          {frontendPriorityImprovements.filter(s => s.priority === "Low").length > 0 && (
            <div className="mb-6">
              <h4 className="text-green-300 text-lg font-semibold mb-3">💡 Low Priority Refinements</h4>
              <div className="space-y-3">
                {frontendPriorityImprovements.filter(s => s.priority === "Low").map((suggestion, index) => (
                  <div key={index} className="p-4 rounded-lg border-2 bg-green-500/20 border-green-500/50">
                    <div className="flex items-center gap-2 mb-2">
                      <span className="px-2 py-1 rounded-full text-xs font-bold bg-green-500 text-white">
                        {suggestion.priority}
                      </span>
                      <h4 className="text-white font-semibold">{suggestion.issue}</h4>
                    </div>
                    <p className="text-white/90 text-sm mb-2">{suggestion.action}</p>
                    <p className="text-white/70 text-xs bg-white/10 rounded p-2">
                      📊 {suggestion.current} → 🎯 {suggestion.target}
                    </p>
                    <p className="text-green-200 text-xs mt-1">{suggestion.impact}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Practice Exercises */}
          {frontendPriorityImprovements.filter(s => s.priority === "Practice").length > 0 && (
            <div className="mb-6">
              <h4 className="text-blue-300 text-lg font-semibold mb-3">🏋️ Practice Exercises</h4>
              <div className="space-y-3">
                {frontendPriorityImprovements.filter(s => s.priority === "Practice").map((suggestion, index) => (
                  <div key={index} className="p-4 rounded-lg border-2 bg-blue-500/20 border-blue-500/50">
                    <div className="flex items-center gap-2 mb-2">
                      <span className="px-2 py-1 rounded-full text-xs font-bold bg-blue-500 text-white">
                        Practice
                      </span>
                      <h4 className="text-white font-semibold">{suggestion.issue}</h4>
                    </div>
                    <p className="text-white/90 text-sm mb-2">{suggestion.action}</p>
                    <p className="text-white/70 text-xs bg-white/10 rounded p-2">
                      📊 {suggestion.current} → 🎯 {suggestion.target}
                    </p>
                    <p className="text-blue-200 text-xs mt-1">{suggestion.impact}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Immediate Actions */}
          {frontendPriorityImprovements.filter(s => s.priority === "Immediate").length > 0 && (
            <div className="mb-6">
              <h4 className="text-purple-300 text-lg font-semibold mb-3">⚡ Immediate Actions</h4>
              <div className="space-y-3">
                {frontendPriorityImprovements.filter(s => s.priority === "Immediate").map((suggestion, index) => (
                  <div key={index} className="p-4 rounded-lg border-2 bg-purple-500/20 border-purple-500/50">
                    <div className="flex items-center gap-2 mb-2">
                      <span className="px-2 py-1 rounded-full text-xs font-bold bg-purple-500 text-white">
                        Immediate
                      </span>
                      <h4 className="text-white font-semibold">{suggestion.issue}</h4>
                    </div>
                    <p className="text-white/90 text-sm mb-2">{suggestion.action}</p>
                    <p className="text-white/70 text-xs bg-white/10 rounded p-2">
                      📊 {suggestion.current} → 🎯 {suggestion.target}
                    </p>
                    <p className="text-purple-200 text-xs mt-1">{suggestion.impact}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Fallback if no improvements */}
          {frontendPriorityImprovements.length === 0 && (
            <div className="text-center py-8">
              <p className="text-white/70 text-lg">No specific improvements needed!</p>
              <p className="text-white/50 text-sm mt-2">Your speech patterns are within excellent ranges.</p>
            </div>
          )}
        </div>


        {/* Enhanced Feedback */}
        {false && results.enhancedFeedback && typeof results.enhancedFeedback === 'string' && (
          <div className="mt-6 p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
            <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">🎯 Personalized Feedback</h3>
            <div className="p-4 bg-white/5 rounded-lg">
              <pre className="text-white/90 text-sm whitespace-pre-wrap font-mono">
                {String(results.enhancedFeedback)}
              </pre>
            </div>
          </div>
        )}

        {/* Real-time Feedback */}
        {false && results.realTimeFeedback && typeof results.realTimeFeedback === 'string' && (
          <div className="mt-6 p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
            <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">⚡ Real-time Feedback</h3>
            <div className="p-4 bg-white/5 rounded-lg">
              <pre className="text-white/90 text-sm whitespace-pre-wrap font-mono">
                {String(results.realTimeFeedback)}
              </pre>
            </div>
          </div>
        )}

        {/* Comprehensive Report */}
        {false && results.comprehensiveReport && typeof results.comprehensiveReport === 'string' && (
          <div className="mt-6 p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
            <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">📊 Comprehensive Report</h3>
            <div className="p-4 bg-white/5 rounded-lg max-h-96 overflow-y-auto">
              <pre className="text-white/90 text-sm whitespace-pre-wrap font-mono">
                {String(results.comprehensiveReport)}
              </pre>
            </div>
          </div>
        )}

        {/* Debug: Show raw data if feedback is not a string */}
        {false && results.enhancedFeedback && typeof results.enhancedFeedback !== 'string' && (
          <div className="mt-6 p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
            <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">🐛 Debug: Enhanced Feedback (Object)</h3>
            <div className="p-4 bg-white/5 rounded-lg">
              <pre className="text-white/90 text-sm whitespace-pre-wrap font-mono">
                {JSON.stringify(results.enhancedFeedback, null, 2)}
              </pre>
            </div>
          </div>
        )}

        {false && results.realTimeFeedback && typeof results.realTimeFeedback !== 'string' && (
          <div className="mt-6 p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
            <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">🐛 Debug: Real-time Feedback (Object)</h3>
            <div className="p-4 bg-white/5 rounded-lg">
              <pre className="text-white/90 text-sm whitespace-pre-wrap font-mono">
                {JSON.stringify(results.realTimeFeedback, null, 2)}
              </pre>
            </div>
          </div>
        )}

        {false && results.comprehensiveReport && typeof results.comprehensiveReport !== 'string' && (
          <div className="mt-6 p-4 lg:p-6 bg-gradient-to-b from-[#00171f] to-[#003b46] dark:from-[#003b46] dark:to-[#0084a6] rounded-lg">
            <h3 className="text-white text-lg lg:text-xl font-semibold mb-4">🐛 Debug: Comprehensive Report (Object)</h3>
            <div className="p-4 bg-white/5 rounded-lg">
              <pre className="text-white/90 text-sm whitespace-pre-wrap font-mono">
                {JSON.stringify(results.comprehensiveReport, null, 2)}
              </pre>
            </div>
          </div>
        )}
                    </>
                  );
                })()}
              </div>
            )}


            {/* Animated Image - Fixed Position at End of Each Tab */}
            <motion.div
              className="mt-8 relative overflow-hidden rounded-2xl border-2 border-white/20 shadow-2xl"
              initial={{ opacity: 0, x: 50, y: 20 }}
              animate={{ opacity: 1, x: 0, y: 0 }}
              transition={{ duration: 0.8, delay: 0.5 }}
              whileHover={{ scale: 1.02 }}
              style={{ position: 'sticky', bottom: '20px' }}
            >
              {/* Floating Particles Background */}
              <div className="absolute inset-0 pointer-events-none z-10">
                {[...Array(8)].map((_, i) => (
                  <motion.div
                    key={i}
                    className="absolute w-2 h-2 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full opacity-60"
                    style={{
                      left: `${Math.random() * 100}%`,
                      top: `${Math.random() * 100}%`,
                    }}
                    animate={{
                      y: [0, -20, 0],
                      opacity: [0.6, 1, 0.6],
                      scale: [1, 1.2, 1],
                    }}
                    transition={{
                      duration: 3 + Math.random() * 2,
                      repeat: Infinity,
                      delay: i * 0.3,
                      ease: "easeInOut",
                    }}
                  />
                ))}
              </div>

              {/* Main Image */}
              <motion.img
                src={image01}
                alt="Speech Visualization"
                className="w-full h-70 object-cover"
                initial={{ scale: 1.1 }}
                animate={{ scale: 1 }}
                transition={{ duration: 1.2, ease: "easeOut" }}
                whileHover={{ scale: 1.05 }}
              />

              {/* Overlay */}
              <motion.div
                className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 1, delay: 0.7 }}
              />

              {/* Bottom Info Panel */}
              <motion.div
                className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/80 to-transparent"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8, delay: 1 }}
              >
                <h3 className="text-white font-semibold text-lg mb-2">🎤 Speech Mastery</h3>
                <p className="text-white/80 text-sm">Interactive visualization of your speaking journey</p>
              </motion.div>
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaceManagement;