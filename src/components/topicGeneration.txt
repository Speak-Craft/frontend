// src/pages/TopicGenerator.jsx
import React, { useState } from 'react';
import axios from 'axios';

const TopicGenerator = () => {
  const [topicText, setTopicText] = useState('');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState('');

  const generate = async () => {
    setError('');
    setResult(null);

    if (!topicText || topicText.trim().length < 3) {
      setError('Please enter a valid topic.');
      return;
    }

    setLoading(true);
    try {
      const res = await axios.post(
        'http://localhost:5000/api/presentation/generate',
        { topic: topicText, slideCount: 8 },
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );

      // If API returned parsed object in res.data.parsed
      if (res.data.parsed) {
        setResult(res.data.parsed);
      } else if (res.data.topic) {
        // saved in DB, backend returned topicDoc
        setResult({
          mainTopic: res.data.topic.mainTopic,
          slides: res.data.topic.suggestedSlides,
          folderStructure: res.data.topic.folderStructure,
        });
      } else if (res.data.rawText) {
        // fallback raw model text
        setResult({ rawText: res.data.rawText });
      } else {
        setError('Unexpected response from server.');
      }
    } catch (err) {
      console.error('❌ generate error:', err.response?.data || err.message);
      setError(err.response?.data?.error || 'Failed to generate topics');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">✨ Presentation Topic Helper</h2>

      <textarea
        value={topicText}
        onChange={(e) => setTopicText(e.target.value)}
        placeholder="Enter your main topic (e.g., 'Introduction to Reinforcement Learning')"
        className="w-full p-3 rounded-md bg-gray-800 text-white mb-3"
        rows={3}
      />

      <div className="flex items-center gap-3">
        <button
          disabled={loading}
          onClick={generate}
          className="bg-blue-500 hover:bg-blue-600 px-5 py-2 rounded-md text-white"
        >
          {loading ? 'Generating…' : 'Generate Topics'}
        </button>
        <button
          onClick={() => { setTopicText(''); setResult(null); setError(''); }}
          className="bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded-md text-white"
        >
          Clear
        </button>
      </div>

      {error && <div className="mt-4 text-red-400">{error}</div>}

      {result && (
        <div className="mt-6 bg-gray-900 p-6 rounded-md text-white shadow-md">
          <h3 className="text-xl font-semibold mb-2">{result.mainTopic || 'Result'}</h3>

          {result.shortSummary && <p className="mb-4">{result.shortSummary}</p>}

          {result.slides ? (
            <div>
              <h4 className="font-semibold mb-2">Slides</h4>
              <ol className="list-decimal ml-6 space-y-3">
                {result.slides.map((s, i) => (
                  <li key={i} className="mb-2">
                    <div className="font-semibold">{s.title}</div>
                    <ul className="list-disc ml-6">
                      {s.bullets && s.bullets.map((b, idx) => (
                        <li key={idx}>{b}</li>
                      ))}
                    </ul>
                  </li>
                ))}
              </ol>
            </div>
          ) : null}

          {result.folderStructure && (
            <div className="mt-4">
              <h4 className="font-semibold">Suggested Folder Structure</h4>
              <pre className="bg-gray-800 p-3 rounded mt-2 text-sm">
                {JSON.stringify(result.folderStructure, null, 2)}
              </pre>
            </div>
          )}

          {result.rawText && (
            <div className="mt-4">
              <h4 className="font-semibold">Raw Response</h4>
              <pre className="bg-gray-800 p-3 rounded mt-2 text-sm whitespace-pre-wrap">
                {result.rawText}
              </pre>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default TopicGenerator;
